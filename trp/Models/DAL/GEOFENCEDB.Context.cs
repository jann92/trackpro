//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Philgps_WebAPI.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class GEOFENCEDBEntities : DbContext
    {
        public GEOFENCEDBEntities(string _Entity)
            : base("name=" + _Entity)
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Geocoordinate> Geocoordinate { get; set; }
        public DbSet<ObjectGeofence> ObjectGeofence { get; set; }
        public DbSet<PointOfInterest> PointOfInterest { get; set; }
        public DbSet<PointOfInterestType> PointOfInterestType { get; set; }
        public DbSet<Zone> Zone { get; set; }
        public DbSet<ZoneType> ZoneType { get; set; }
        public DbSet<GeofenceHistory> GeofenceHistory { get; set; }
        public DbSet<GeofenceInfo> GeofenceInfo { get; set; }
        public DbSet<Route> Route { get; set; }
        public DbSet<Geofence> Geofence { get; set; }
    
        public virtual ObjectResult<string> sp_PGPS_get_zones_single_geojson(string geofenceID)
        {
            var geofenceIDParameter = geofenceID != null ?
                new ObjectParameter("GeofenceID", geofenceID) :
                new ObjectParameter("GeofenceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_PGPS_get_zones_single_geojson", geofenceIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_user_zone_list_Result> sp_PGPS_get_user_zone_list(Nullable<int> userID, Nullable<int> parentID, string take, Nullable<int> page)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var takeParameter = take != null ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_user_zone_list_Result>("sp_PGPS_get_user_zone_list", userIDParameter, parentIDParameter, takeParameter, pageParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_user_zone_list_filtered_Result> sp_PGPS_get_user_zone_list_filtered(Nullable<int> userID, Nullable<int> parentID, string take, string filter, Nullable<int> page)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var takeParameter = take != null ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(string));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_user_zone_list_filtered_Result>("sp_PGPS_get_user_zone_list_filtered", userIDParameter, parentIDParameter, takeParameter, filterParameter, pageParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_object_zone_list_Result> sp_PGPS_get_object_zone_list(Nullable<int> userID, string objectID, string take, Nullable<int> page)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var takeParameter = take != null ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_object_zone_list_Result>("sp_PGPS_get_object_zone_list", userIDParameter, objectIDParameter, takeParameter, pageParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_object_zone_list_filtered_Result> sp_PGPS_get_object_zone_list_filtered(Nullable<int> userID, string objectID, string take, Nullable<int> page, string filter)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var takeParameter = take != null ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_object_zone_list_filtered_Result>("sp_PGPS_get_object_zone_list_filtered", userIDParameter, objectIDParameter, takeParameter, pageParameter, filterParameter);
        }
    
        public virtual ObjectResult<sp_pgps_get_zone_inside_assets_Result> sp_pgps_get_zone_inside_assets(Nullable<int> zoneid, string objectlist)
        {
            var zoneidParameter = zoneid.HasValue ?
                new ObjectParameter("zoneid", zoneid) :
                new ObjectParameter("zoneid", typeof(int));
    
            var objectlistParameter = objectlist != null ?
                new ObjectParameter("objectlist", objectlist) :
                new ObjectParameter("objectlist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pgps_get_zone_inside_assets_Result>("sp_pgps_get_zone_inside_assets", zoneidParameter, objectlistParameter);
        }
    
        public virtual ObjectResult<sp_pgps_get_assets_inside_list_based_zone_type_Result> sp_pgps_get_assets_inside_list_based_zone_type(Nullable<int> account_id, Nullable<bool> allowed)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(int));
    
            var allowedParameter = allowed.HasValue ?
                new ObjectParameter("allowed", allowed) :
                new ObjectParameter("allowed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pgps_get_assets_inside_list_based_zone_type_Result>("sp_pgps_get_assets_inside_list_based_zone_type", account_idParameter, allowedParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_user_route_list_status_Result> sp_PGPS_get_user_route_list_status(string account_id)
        {
            var account_idParameter = account_id != null ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_user_route_list_status_Result>("sp_PGPS_get_user_route_list_status", account_idParameter);
        }
    }
}
