//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Philgps_WebAPI.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TFDBEntities : DbContext
    {
        public TFDBEntities(string entity)
            : base("name=" + entity)
        {

        }


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<A_ActiveLocation> A_ActiveLocation { get; set; }
        public virtual DbSet<A_ActiveOdo> A_ActiveOdo { get; set; }
        public virtual DbSet<A_ActiveTag> A_ActiveTag { get; set; }
        public virtual DbSet<A_ActiveTracks> A_ActiveTracks { get; set; }
        public virtual DbSet<A_ActiveUsage> A_ActiveUsage { get; set; }
        public virtual DbSet<A_Alarm> A_Alarm { get; set; }
        public virtual DbSet<A_AlarmDisposal> A_AlarmDisposal { get; set; }
        public virtual DbSet<A_Arrive> A_Arrive { get; set; }
        public virtual DbSet<A_Category> A_Category { get; set; }
        public virtual DbSet<A_CrowdReport> A_CrowdReport { get; set; }
        public virtual DbSet<A_CTICsrlog> A_CTICsrlog { get; set; }
        public virtual DbSet<A_CTICsrs> A_CTICsrs { get; set; }
        public virtual DbSet<A_CTIInCall> A_CTIInCall { get; set; }
        public virtual DbSet<A_CTIOutCall> A_CTIOutCall { get; set; }
        public virtual DbSet<A_CTIRecord> A_CTIRecord { get; set; }
        public virtual DbSet<A_CTITrunk> A_CTITrunk { get; set; }
        public virtual DbSet<A_CustomerInfo> A_CustomerInfo { get; set; }
        public virtual DbSet<A_CustomerUser> A_CustomerUser { get; set; }
        public virtual DbSet<A_Departmentinfo> A_Departmentinfo { get; set; }
        public virtual DbSet<A_DictDetail> A_DictDetail { get; set; }
        public virtual DbSet<A_DictMaster> A_DictMaster { get; set; }
        public virtual DbSet<A_Discontent> A_Discontent { get; set; }
        public virtual DbSet<A_DriverInfo> A_DriverInfo { get; set; }
        public virtual DbSet<A_Event> A_Event { get; set; }
        public virtual DbSet<A_Feedback> A_Feedback { get; set; }
        public virtual DbSet<A_GeoReport> A_GeoReport { get; set; }
        public virtual DbSet<A_GisUserLog> A_GisUserLog { get; set; }
        public virtual DbSet<A_HourReport> A_HourReport { get; set; }
        public virtual DbSet<A_ICCard> A_ICCard { get; set; }
        public virtual DbSet<A_ICLog> A_ICLog { get; set; }
        public virtual DbSet<A_Information> A_Information { get; set; }
        public virtual DbSet<A_InstallInfo> A_InstallInfo { get; set; }
        public virtual DbSet<A_Location> A_Location { get; set; }
        public virtual DbSet<A_LocationsReport> A_LocationsReport { get; set; }
        public virtual DbSet<A_MapGrid> A_MapGrid { get; set; }
        public virtual DbSet<A_MapPositionInfo> A_MapPositionInfo { get; set; }
        public virtual DbSet<A_MapStreetInfo> A_MapStreetInfo { get; set; }
        public virtual DbSet<A_MDTArea> A_MDTArea { get; set; }
        public virtual DbSet<A_MDTInfo> A_MDTInfo { get; set; }
        public virtual DbSet<A_MTCommand> A_MTCommand { get; set; }
        public virtual DbSet<A_ObjectInfo> A_ObjectInfo { get; set; }
        public virtual DbSet<A_ObjectPhoto> A_ObjectPhoto { get; set; }
        public virtual DbSet<A_ObjRoad> A_ObjRoad { get; set; }
        public virtual DbSet<A_ObjTag> A_ObjTag { get; set; }
        public virtual DbSet<A_Orders> A_Orders { get; set; }
        public virtual DbSet<A_Point> A_Point { get; set; }
        public virtual DbSet<A_Receivables> A_Receivables { get; set; }
        public virtual DbSet<A_Register> A_Register { get; set; }
        public virtual DbSet<A_RegisterService> A_RegisterService { get; set; }
        public virtual DbSet<A_RegObject> A_RegObject { get; set; }
        public virtual DbSet<A_RepairInfo> A_RepairInfo { get; set; }
        public virtual DbSet<A_Road> A_Road { get; set; }
        public virtual DbSet<A_Road_DataReport> A_Road_DataReport { get; set; }
        public virtual DbSet<A_Road_PlanStation> A_Road_PlanStation { get; set; }
        public virtual DbSet<A_Road_PointReport> A_Road_PointReport { get; set; }
        public virtual DbSet<A_Road_PointTracks> A_Road_PointTracks { get; set; }
        public virtual DbSet<A_Road_SpeedReport> A_Road_SpeedReport { get; set; }
        public virtual DbSet<A_Road_StationReport> A_Road_StationReport { get; set; }
        public virtual DbSet<A_Road_StationTracks> A_Road_StationTracks { get; set; }
        public virtual DbSet<A_Road_Vehicle> A_Road_Vehicle { get; set; }
        public virtual DbSet<A_RoadBranchData> A_RoadBranchData { get; set; }
        public virtual DbSet<A_RoadData> A_RoadData { get; set; }
        public virtual DbSet<A_RoadInfo> A_RoadInfo { get; set; }
        public virtual DbSet<A_RoadReport> A_RoadReport { get; set; }
        public virtual DbSet<A_RoadTracks> A_RoadTracks { get; set; }
        public virtual DbSet<A_RxTx> A_RxTx { get; set; }
        public virtual DbSet<A_Sale> A_Sale { get; set; }
        public virtual DbSet<A_SendCar> A_SendCar { get; set; }
        public virtual DbSet<A_Station> A_Station { get; set; }
        public virtual DbSet<A_StationInfo> A_StationInfo { get; set; }
        public virtual DbSet<A_SubCenterInfo> A_SubCenterInfo { get; set; }
        public virtual DbSet<A_SubObjectinfo> A_SubObjectinfo { get; set; }
        public virtual DbSet<A_SueInfo> A_SueInfo { get; set; }
        public virtual DbSet<A_TaxiFee> A_TaxiFee { get; set; }
        public virtual DbSet<A_TaxiInfo_day> A_TaxiInfo_day { get; set; }
        public virtual DbSet<A_TaxInfo> A_TaxInfo { get; set; }
        public virtual DbSet<A_TaxiTracks> A_TaxiTracks { get; set; }
        public virtual DbSet<A_Tracks> A_Tracks { get; set; }
        public virtual DbSet<A_Tracks_01> A_Tracks_01 { get; set; }
        public virtual DbSet<A_Tracks_02> A_Tracks_02 { get; set; }
        public virtual DbSet<A_Tracks_03> A_Tracks_03 { get; set; }
        public virtual DbSet<A_Tracks_04> A_Tracks_04 { get; set; }
        public virtual DbSet<A_Tracks_05> A_Tracks_05 { get; set; }
        public virtual DbSet<A_Tracks_06> A_Tracks_06 { get; set; }
        public virtual DbSet<A_Tracks_07> A_Tracks_07 { get; set; }
        public virtual DbSet<A_Tracks_08> A_Tracks_08 { get; set; }
        public virtual DbSet<A_Tracks_09> A_Tracks_09 { get; set; }
        public virtual DbSet<A_Tracks_10> A_Tracks_10 { get; set; }
        public virtual DbSet<A_Tracks_11> A_Tracks_11 { get; set; }
        public virtual DbSet<A_Tracks_12> A_Tracks_12 { get; set; }
        public virtual DbSet<A_TrackTag> A_TrackTag { get; set; }
        public virtual DbSet<A_TripReport> A_TripReport { get; set; }
        public virtual DbSet<A_UpdateDBHistory> A_UpdateDBHistory { get; set; }
        public virtual DbSet<A_UserLog> A_UserLog { get; set; }
        public virtual DbSet<A_VehicleTeamInfo> A_VehicleTeamInfo { get; set; }
        public virtual DbSet<A_WebGISRxTx> A_WebGISRxTx { get; set; }
        public virtual DbSet<A_WeekReport> A_WeekReport { get; set; }
        public virtual DbSet<A_WhsOut> A_WhsOut { get; set; }
        public virtual DbSet<A_WhsStock> A_WhsStock { get; set; }
        public virtual DbSet<B_POI> B_POI { get; set; }
        public virtual DbSet<B_POIType> B_POIType { get; set; }
        public virtual DbSet<B_SensorType> B_SensorType { get; set; }
        public virtual DbSet<D_capacityType> D_capacityType { get; set; }
        public virtual DbSet<D_CommandType> D_CommandType { get; set; }
        public virtual DbSet<D_CommChannel> D_CommChannel { get; set; }
        public virtual DbSet<D_Credit_Level> D_Credit_Level { get; set; }
        public virtual DbSet<D_Customer_status> D_Customer_status { get; set; }
        public virtual DbSet<D_Customer_Type> D_Customer_Type { get; set; }
        public virtual DbSet<D_DictDetail> D_DictDetail { get; set; }
        public virtual DbSet<D_DictMaster> D_DictMaster { get; set; }
        public virtual DbSet<D_DispatchFlag> D_DispatchFlag { get; set; }
        public virtual DbSet<D_DriveCard_Type> D_DriveCard_Type { get; set; }
        public virtual DbSet<D_DriverStatus> D_DriverStatus { get; set; }
        public virtual DbSet<D_Employeedegree> D_Employeedegree { get; set; }
        public virtual DbSet<D_EmployeeType> D_EmployeeType { get; set; }
        public virtual DbSet<D_FinishFlag> D_FinishFlag { get; set; }
        public virtual DbSet<D_GISFlag> D_GISFlag { get; set; }
        public virtual DbSet<D_GisUserLog> D_GisUserLog { get; set; }
        public virtual DbSet<D_GPSFlag> D_GPSFlag { get; set; }
        public virtual DbSet<D_HQGPS> D_HQGPS { get; set; }
        public virtual DbSet<D_ICCardType> D_ICCardType { get; set; }
        public virtual DbSet<D_InfoType> D_InfoType { get; set; }
        public virtual DbSet<D_InsureType> D_InsureType { get; set; }
        public virtual DbSet<D_MDTCompany> D_MDTCompany { get; set; }
        public virtual DbSet<D_ObjectBrand> D_ObjectBrand { get; set; }
        public virtual DbSet<D_ObjectIcon> D_ObjectIcon { get; set; }
        public virtual DbSet<D_ObjectStatus> D_ObjectStatus { get; set; }
        public virtual DbSet<D_ObjectType> D_ObjectType { get; set; }
        public virtual DbSet<D_OrderType> D_OrderType { get; set; }
        public virtual DbSet<D_OverFlag> D_OverFlag { get; set; }
        public virtual DbSet<D_RepairType> D_RepairType { get; set; }
        public virtual DbSet<D_SendType> D_SendType { get; set; }
        public virtual DbSet<D_ServiceRate> D_ServiceRate { get; set; }
        public virtual DbSet<D_ServiceType> D_ServiceType { get; set; }
        public virtual DbSet<D_TempHour> D_TempHour { get; set; }
        public virtual DbSet<D_Tempkm> D_Tempkm { get; set; }
        public virtual DbSet<D_Tempminute> D_Tempminute { get; set; }
        public virtual DbSet<D_TempMonthDay> D_TempMonthDay { get; set; }
        public virtual DbSet<D_TransType> D_TransType { get; set; }
        public virtual DbSet<dtproperty> dtproperties { get; set; }
        public virtual DbSet<Dyan_StagingLocationGateway> Dyan_StagingLocationGateway { get; set; }
        public virtual DbSet<HSE_LastCounterTime> HSE_LastCounterTime { get; set; }
        public virtual DbSet<I_InfoContent> I_InfoContent { get; set; }
        public virtual DbSet<I_InfoCustomDetail> I_InfoCustomDetail { get; set; }
        public virtual DbSet<I_InfoCustomMaster> I_InfoCustomMaster { get; set; }
        public virtual DbSet<I_InfoRxTmp> I_InfoRxTmp { get; set; }
        public virtual DbSet<I_InfoRxTx> I_InfoRxTx { get; set; }
        public virtual DbSet<I_InfoTxTmp> I_InfoTxTmp { get; set; }
        public virtual DbSet<I_InfoTypeRate> I_InfoTypeRate { get; set; }
        public virtual DbSet<Ltfrb_ObjectInfo> Ltfrb_ObjectInfo { get; set; }
        public virtual DbSet<PGPS_Alerts> PGPS_Alerts { get; set; }
        public virtual DbSet<PGPS_Application> PGPS_Application { get; set; }
        public virtual DbSet<PGPS_ApplicationModule> PGPS_ApplicationModule { get; set; }
        public virtual DbSet<PGPS_AssetSchedule> PGPS_AssetSchedule { get; set; }
        public virtual DbSet<PGPS_Cannonball> PGPS_Cannonball { get; set; }
        public virtual DbSet<PGPS_CannonballCheckpoint> PGPS_CannonballCheckpoint { get; set; }
        public virtual DbSet<PGPS_Driver> PGPS_Driver { get; set; }
        public virtual DbSet<PGPS_EmailReports> PGPS_EmailReports { get; set; }
        public virtual DbSet<PGPS_Leaderboard> PGPS_Leaderboard { get; set; }
        public virtual DbSet<PGPS_Log> PGPS_Log { get; set; }
        public virtual DbSet<PGPS_MaintenanceActivity> PGPS_MaintenanceActivity { get; set; }
        public virtual DbSet<PGPS_MaintenanceCategory> PGPS_MaintenanceCategory { get; set; }
        public virtual DbSet<PGPS_MaintenanceType> PGPS_MaintenanceType { get; set; }
        public virtual DbSet<PGPS_Module> PGPS_Module { get; set; }
        public virtual DbSet<PGPS_ObjectDelivery> PGPS_ObjectDelivery { get; set; }
        public virtual DbSet<PGPS_ObjectDriver> PGPS_ObjectDriver { get; set; }
        public virtual DbSet<PGPS_ReportTypes> PGPS_ReportTypes { get; set; }
        public virtual DbSet<PGPS_Schedule> PGPS_Schedule { get; set; }
        public virtual DbSet<PGPS_SensorSetting> PGPS_SensorSetting { get; set; }
        public virtual DbSet<PGPS_SensorType> PGPS_SensorType { get; set; }
        public virtual DbSet<PGPS_SystemUser> PGPS_SystemUser { get; set; }
        public virtual DbSet<PGPS_SystemUserObject> PGPS_SystemUserObject { get; set; }
        public virtual DbSet<PGPS_Tag> PGPS_Tag { get; set; }
        public virtual DbSet<PGPS_TelegramConfig> PGPS_TelegramConfig { get; set; }
        public virtual DbSet<PGPS_TelegramEvent> PGPS_TelegramEvent { get; set; }
        public virtual DbSet<PGPS_Track_Cannonball> PGPS_Track_Cannonball { get; set; }
        public virtual DbSet<PGPS_UserFunction> PGPS_UserFunction { get; set; }
        public virtual DbSet<PGPS_UserLogs> PGPS_UserLogs { get; set; }
        public virtual DbSet<S_RoleFun> S_RoleFun { get; set; }
        public virtual DbSet<S_SysApp> S_SysApp { get; set; }
        public virtual DbSet<S_SysFun> S_SysFun { get; set; }
        public virtual DbSet<S_SysRole> S_SysRole { get; set; }
        public virtual DbSet<S_SysUser> S_SysUser { get; set; }
        public virtual DbSet<S_SysUserVehicle> S_SysUserVehicle { get; set; }
        public virtual DbSet<S_UserRole> S_UserRole { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<T_Customers> T_Customers { get; set; }
        public virtual DbSet<T_Dispatch> T_Dispatch { get; set; }
        public virtual DbSet<T_Grid> T_Grid { get; set; }
        public virtual DbSet<T_Order> T_Order { get; set; }
        public virtual DbSet<T_PositionInfo> T_PositionInfo { get; set; }
        public virtual DbSet<T_RoadInfo> T_RoadInfo { get; set; }
        public virtual DbSet<T_SueInfo> T_SueInfo { get; set; }
        public virtual DbSet<W_ErrorCode> W_ErrorCode { get; set; }
        public virtual DbSet<W_Role> W_Role { get; set; }
        public virtual DbSet<W_SysType> W_SysType { get; set; }
        public virtual DbSet<W_UserInfo> W_UserInfo { get; set; }
        public virtual DbSet<C30324680_20180807> C30324680_20180807 { get; set; }
        public virtual DbSet<C30324680_20180813> C30324680_20180813 { get; set; }
        public virtual DbSet<C30324680_20180815> C30324680_20180815 { get; set; }
        public virtual DbSet<A_ActiveTaxiFee> A_ActiveTaxiFee { get; set; }
        public virtual DbSet<A_ActiveUsage_Backup_20191029> A_ActiveUsage_Backup_20191029 { get; set; }
        public virtual DbSet<A_ActiveUsage_Backup_20191030> A_ActiveUsage_Backup_20191030 { get; set; }
        public virtual DbSet<A_AllUserFee> A_AllUserFee { get; set; }
        public virtual DbSet<A_BetweenStation> A_BetweenStation { get; set; }
        public virtual DbSet<A_ChargingTable> A_ChargingTable { get; set; }
        public virtual DbSet<A_CustomerAccept> A_CustomerAccept { get; set; }
        public virtual DbSet<A_CustomerInput> A_CustomerInput { get; set; }
        public virtual DbSet<A_EmployeeInfo> A_EmployeeInfo { get; set; }
        public virtual DbSet<A_Eventfromcyber3> A_Eventfromcyber3 { get; set; }
        public virtual DbSet<A_FeeIncome> A_FeeIncome { get; set; }
        public virtual DbSet<A_FeeManage> A_FeeManage { get; set; }
        public virtual DbSet<A_FeePayout> A_FeePayout { get; set; }
        public virtual DbSet<A_FeeRxTx> A_FeeRxTx { get; set; }
        public virtual DbSet<A_OneUserFee> A_OneUserFee { get; set; }
        public virtual DbSet<A_ParkingReport> A_ParkingReport { get; set; }
        public virtual DbSet<A_Reminder> A_Reminder { get; set; }
        public virtual DbSet<A_RoadBranchInfo> A_RoadBranchInfo { get; set; }
        public virtual DbSet<A_RoadObject> A_RoadObject { get; set; }
        public virtual DbSet<A_StationRect> A_StationRect { get; set; }
        public virtual DbSet<A_StationTrack> A_StationTrack { get; set; }
        public virtual DbSet<a_tempHour> a_tempHour { get; set; }
        public virtual DbSet<A_Tempkm> A_Tempkm { get; set; }
        public virtual DbSet<a_tempminute> a_tempminute { get; set; }
        public virtual DbSet<A_TempMonthDay> A_TempMonthDay { get; set; }
        public virtual DbSet<A_TempPrintByMonth> A_TempPrintByMonth { get; set; }
        public virtual DbSet<A_TempPrintByWeek> A_TempPrintByWeek { get; set; }
        public virtual DbSet<A_Tracks_09fromcyber> A_Tracks_09fromcyber { get; set; }
        public virtual DbSet<A_TracksSatelit> A_TracksSatelit { get; set; }
        public virtual DbSet<A_Warehouse> A_Warehouse { get; set; }
        public virtual DbSet<A_WebGISRxTxNew> A_WebGISRxTxNew { get; set; }
        public virtual DbSet<AD_ADInfo> AD_ADInfo { get; set; }
        public virtual DbSet<C_CallCarCusInfo> C_CallCarCusInfo { get; set; }
        public virtual DbSet<D_MapList> D_MapList { get; set; }
        public virtual DbSet<D_SendFlag> D_SendFlag { get; set; }
        public virtual DbSet<dyan_AlertEvent> dyan_AlertEvent { get; set; }
        public virtual DbSet<dyan_CustomerAlertReminder> dyan_CustomerAlertReminder { get; set; }
        public virtual DbSet<dyan_IdleCounter> dyan_IdleCounter { get; set; }
        public virtual DbSet<dyan_ParkingCounter> dyan_ParkingCounter { get; set; }
        public virtual DbSet<PGPS_ReportCustom> PGPS_ReportCustom { get; set; }
        public virtual DbSet<PGPS_UserReport> PGPS_UserReport { get; set; }
        public virtual DbSet<W_Module> W_Module { get; set; }
        public virtual DbSet<W_UserRole> W_UserRole { get; set; }
        public virtual DbSet<PGPS_ObjectSettings> PGPS_ObjectSettings { get; set; }
        public virtual DbSet<V_ActivityPerCustomer> V_ActivityPerCustomer { get; set; }
        public virtual DbSet<V_AllData> V_AllData { get; set; }
        public virtual DbSet<V_CekVersion> V_CekVersion { get; set; }
        public virtual DbSet<V_GPSdata> V_GPSdata { get; set; }
        public virtual DbSet<V_PGPS_CurrentObjectTracks> V_PGPS_CurrentObjectTracks { get; set; }
        public virtual DbSet<V_PGPS_ObjectFullInfoList> V_PGPS_ObjectFullInfoList { get; set; }
        public virtual DbSet<V_SueInfo> V_SueInfo { get; set; }
        public virtual DbSet<V_TarikDataGPS> V_TarikDataGPS { get; set; }
        public virtual DbSet<V_TripPerCustomer> V_TripPerCustomer { get; set; }
        public virtual DbSet<V_UserRights> V_UserRights { get; set; }
        public virtual DbSet<v_vehiclecustomer> v_vehiclecustomer { get; set; }
        public virtual DbSet<vw_PGPS_Segment_Cannonball> vw_PGPS_Segment_Cannonball { get; set; }
    
        [DbFunction("TFDBEntities", "fn_pgps_get_alerts")]
        public virtual IQueryable<fn_pgps_get_alerts_Result> fn_pgps_get_alerts(Nullable<int> rolevalue)
        {
            var rolevalueParameter = rolevalue.HasValue ?
                new ObjectParameter("rolevalue", rolevalue) :
                new ObjectParameter("rolevalue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_pgps_get_alerts_Result>("[TFDBEntities].[fn_pgps_get_alerts](@rolevalue)", rolevalueParameter);
        }
    
        [DbFunction("TFDBEntities", "fn_Split")]
        public virtual IQueryable<fn_Split_Result> fn_Split(string text, string delimiter)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_Split_Result>("[TFDBEntities].[fn_Split](@text, @delimiter)", textParameter, delimiterParameter);
        }
    
        [DbFunction("TFDBEntities", "splitstring")]
        public virtual IQueryable<splitstring_Result> splitstring(string stringToSplit)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<splitstring_Result>("[TFDBEntities].[splitstring](@stringToSplit)", stringToSplitParameter);
        }
    
        public virtual int f_DetailFail(Nullable<int> orderId, string objectId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var objectIdParameter = objectId != null ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_DetailFail", orderIdParameter, objectIdParameter);
        }
    
        public virtual int f_DetailFailDisp(Nullable<int> orderid)
        {
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("Orderid", orderid) :
                new ObjectParameter("Orderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_DetailFailDisp", orderidParameter);
        }
    
        public virtual int f_FinishDispatch(Nullable<int> orderId, string objectId, string billDispatchNO)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var objectIdParameter = objectId != null ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(string));
    
            var billDispatchNOParameter = billDispatchNO != null ?
                new ObjectParameter("BillDispatchNO", billDispatchNO) :
                new ObjectParameter("BillDispatchNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_FinishDispatch", orderIdParameter, objectIdParameter, billDispatchNOParameter);
        }
    
        public virtual int f_Grouping(string objectId, Nullable<int> groupNo_dispatch, string companyName_dispatch)
        {
            var objectIdParameter = objectId != null ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(string));
    
            var groupNo_dispatchParameter = groupNo_dispatch.HasValue ?
                new ObjectParameter("GroupNo_dispatch", groupNo_dispatch) :
                new ObjectParameter("GroupNo_dispatch", typeof(int));
    
            var companyName_dispatchParameter = companyName_dispatch != null ?
                new ObjectParameter("CompanyName_dispatch", companyName_dispatch) :
                new ObjectParameter("CompanyName_dispatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_Grouping", objectIdParameter, groupNo_dispatchParameter, companyName_dispatchParameter);
        }
    
        public virtual int f_insOrders(string customerName, string tel, Nullable<System.DateTime> intime, Nullable<System.DateTime> outtime, string inRoad, Nullable<int> inRoadId, string nearRoad, Nullable<int> nearRoadId, string outplace, string detail, Nullable<bool> isdouble, Nullable<bool> isOutCity, string billDispatchNo, Nullable<int> needCars, Nullable<byte> orderType, string remark)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var intimeParameter = intime.HasValue ?
                new ObjectParameter("Intime", intime) :
                new ObjectParameter("Intime", typeof(System.DateTime));
    
            var outtimeParameter = outtime.HasValue ?
                new ObjectParameter("Outtime", outtime) :
                new ObjectParameter("Outtime", typeof(System.DateTime));
    
            var inRoadParameter = inRoad != null ?
                new ObjectParameter("InRoad", inRoad) :
                new ObjectParameter("InRoad", typeof(string));
    
            var inRoadIdParameter = inRoadId.HasValue ?
                new ObjectParameter("inRoadId", inRoadId) :
                new ObjectParameter("inRoadId", typeof(int));
    
            var nearRoadParameter = nearRoad != null ?
                new ObjectParameter("nearRoad", nearRoad) :
                new ObjectParameter("nearRoad", typeof(string));
    
            var nearRoadIdParameter = nearRoadId.HasValue ?
                new ObjectParameter("NearRoadId", nearRoadId) :
                new ObjectParameter("NearRoadId", typeof(int));
    
            var outplaceParameter = outplace != null ?
                new ObjectParameter("Outplace", outplace) :
                new ObjectParameter("Outplace", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            var isdoubleParameter = isdouble.HasValue ?
                new ObjectParameter("Isdouble", isdouble) :
                new ObjectParameter("Isdouble", typeof(bool));
    
            var isOutCityParameter = isOutCity.HasValue ?
                new ObjectParameter("IsOutCity", isOutCity) :
                new ObjectParameter("IsOutCity", typeof(bool));
    
            var billDispatchNoParameter = billDispatchNo != null ?
                new ObjectParameter("BillDispatchNo", billDispatchNo) :
                new ObjectParameter("BillDispatchNo", typeof(string));
    
            var needCarsParameter = needCars.HasValue ?
                new ObjectParameter("NeedCars", needCars) :
                new ObjectParameter("NeedCars", typeof(int));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(byte));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_insOrders", customerNameParameter, telParameter, intimeParameter, outtimeParameter, inRoadParameter, inRoadIdParameter, nearRoadParameter, nearRoadIdParameter, outplaceParameter, detailParameter, isdoubleParameter, isOutCityParameter, billDispatchNoParameter, needCarsParameter, orderTypeParameter, remarkParameter);
        }
    
        public virtual int f_UpdateGIS(Nullable<int> orderId, Nullable<float> lon, Nullable<float> lat)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(float));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_UpdateGIS", orderIdParameter, lonParameter, latParameter);
        }
    
        public virtual int f_UpdateNeedCarNum(Nullable<int> orderId, Nullable<int> finnum)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var finnumParameter = finnum.HasValue ?
                new ObjectParameter("Finnum", finnum) :
                new ObjectParameter("Finnum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_UpdateNeedCarNum", orderIdParameter, finnumParameter);
        }
    
        public virtual int dt_addtosourcecontrol(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_addtosourcecontrol_u(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol_u", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_adduserobject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject");
        }
    
        public virtual int dt_adduserobject_vcs(string vchProperty)
        {
            var vchPropertyParameter = vchProperty != null ?
                new ObjectParameter("vchProperty", vchProperty) :
                new ObjectParameter("vchProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject_vcs", vchPropertyParameter);
        }
    
        public virtual int dt_checkinobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkinobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkoutobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_checkoutobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_displayoaerror(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_displayoaerror_u(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror_u", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_droppropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_droppropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual int dt_dropuserobjectbyid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_dropuserobjectbyid", idParameter);
        }
    
        public virtual int dt_generateansiname(ObjectParameter name)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_generateansiname", name);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop(string property, string value)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop", propertyParameter, valueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop_u(string property, string uvalue)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop_u", propertyParameter, uvalueParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_Result> dt_getpropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_Result>("dt_getpropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_u_Result> dt_getpropertiesbyid_u(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_u_Result>("dt_getpropertiesbyid_u", idParameter, propertyParameter);
        }
    
        public virtual int dt_getpropertiesbyid_vcs(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_getpropertiesbyid_vcs_u(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs_u", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_isundersourcecontrol(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_isundersourcecontrol_u(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol_u", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_removefromsourcecontrol()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_removefromsourcecontrol");
        }
    
        public virtual int dt_setpropertybyid(Nullable<int> id, string property, string value, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid", idParameter, propertyParameter, valueParameter, lvalueParameter);
        }
    
        public virtual int dt_setpropertybyid_u(Nullable<int> id, string property, string uvalue, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid_u", idParameter, propertyParameter, uvalueParameter, lvalueParameter);
        }
    
        public virtual int dt_validateloginparams(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_validateloginparams_u(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams_u", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_vcsenabled()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_vcsenabled");
        }
    
        public virtual ObjectResult<Nullable<int>> dt_verstamp006()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_verstamp006");
        }
    
        public virtual int dt_whocheckedout(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_whocheckedout", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_whocheckedout_u(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_whocheckedout_u", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual ObjectResult<sp_Account_Result> sp_Account(Nullable<int> jFYear, Nullable<int> jFMonth, string objectID)
        {
            var jFYearParameter = jFYear.HasValue ?
                new ObjectParameter("JFYear", jFYear) :
                new ObjectParameter("JFYear", typeof(int));
    
            var jFMonthParameter = jFMonth.HasValue ?
                new ObjectParameter("JFMonth", jFMonth) :
                new ObjectParameter("JFMonth", typeof(int));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Account_Result>("sp_Account", jFYearParameter, jFMonthParameter, objectIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_AndroGetHistory(string vid, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var vidParameter = vid != null ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AndroGetHistory", vidParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<sp_AndroGetPoi_Result> sp_AndroGetPoi(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AndroGetPoi_Result>("sp_AndroGetPoi", useridParameter);
        }
    
        public virtual ObjectResult<sp_AndroGetTracks_Result> sp_AndroGetTracks(string groupid)
        {
            var groupidParameter = groupid != null ?
                new ObjectParameter("groupid", groupid) :
                new ObjectParameter("groupid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AndroGetTracks_Result>("sp_AndroGetTracks", groupidParameter);
        }
    
        public virtual int sp_Console_DataTransfer(Nullable<int> transCond, Nullable<int> monthOrWeek, Nullable<int> monthOrWeekCount, Nullable<int> currentCount, Nullable<int> recentCount, Nullable<bool> aTracks, Nullable<bool> aRxTx)
        {
            var transCondParameter = transCond.HasValue ?
                new ObjectParameter("TransCond", transCond) :
                new ObjectParameter("TransCond", typeof(int));
    
            var monthOrWeekParameter = monthOrWeek.HasValue ?
                new ObjectParameter("MonthOrWeek", monthOrWeek) :
                new ObjectParameter("MonthOrWeek", typeof(int));
    
            var monthOrWeekCountParameter = monthOrWeekCount.HasValue ?
                new ObjectParameter("MonthOrWeekCount", monthOrWeekCount) :
                new ObjectParameter("MonthOrWeekCount", typeof(int));
    
            var currentCountParameter = currentCount.HasValue ?
                new ObjectParameter("CurrentCount", currentCount) :
                new ObjectParameter("CurrentCount", typeof(int));
    
            var recentCountParameter = recentCount.HasValue ?
                new ObjectParameter("RecentCount", recentCount) :
                new ObjectParameter("RecentCount", typeof(int));
    
            var aTracksParameter = aTracks.HasValue ?
                new ObjectParameter("ATracks", aTracks) :
                new ObjectParameter("ATracks", typeof(bool));
    
            var aRxTxParameter = aRxTx.HasValue ?
                new ObjectParameter("ARxTx", aRxTx) :
                new ObjectParameter("ARxTx", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Console_DataTransfer", transCondParameter, monthOrWeekParameter, monthOrWeekCountParameter, currentCountParameter, recentCountParameter, aTracksParameter, aRxTxParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_CustomerSet_Result> sp_CustomerSet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CustomerSet_Result>("sp_CustomerSet");
        }
    
        public virtual ObjectResult<sp_CusType_Result> sp_CusType(Nullable<int> inputParam)
        {
            var inputParamParameter = inputParam.HasValue ?
                new ObjectParameter("InputParam", inputParam) :
                new ObjectParameter("InputParam", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CusType_Result>("sp_CusType", inputParamParameter);
        }
    
        public virtual int sp_DeleteDriverTag(string customerID)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteDriverTag", customerIDParameter);
        }
    
        public virtual int sp_DelTxInfoAfterSend(Nullable<int> txID)
        {
            var txIDParameter = txID.HasValue ?
                new ObjectParameter("TxID", txID) :
                new ObjectParameter("TxID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DelTxInfoAfterSend", txIDParameter);
        }
    
        public virtual int sp_DelTypeAndContent(Nullable<int> typeID)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DelTypeAndContent", typeIDParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_GetDataPlayback(string vid, Nullable<System.DateTime> starttime, Nullable<System.DateTime> endtime)
        {
            var vidParameter = vid != null ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(string));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.DateTime));
    
            var endtimeParameter = endtime.HasValue ?
                new ObjectParameter("endtime", endtime) :
                new ObjectParameter("endtime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetDataPlayback", vidParameter, starttimeParameter, endtimeParameter);
        }
    
        public virtual int SP_GetDataPlaybackAuto(string vid, Nullable<System.DateTime> starttime, Nullable<System.DateTime> endtime)
        {
            var vidParameter = vid != null ?
                new ObjectParameter("vid", vid) :
                new ObjectParameter("vid", typeof(string));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.DateTime));
    
            var endtimeParameter = endtime.HasValue ?
                new ObjectParameter("endtime", endtime) :
                new ObjectParameter("endtime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetDataPlaybackAuto", vidParameter, starttimeParameter, endtimeParameter);
        }
    
        public virtual int sp_GetRespDataByReqData(Nullable<int> rxID, string txContent, Nullable<int> sendSource)
        {
            var rxIDParameter = rxID.HasValue ?
                new ObjectParameter("RxID", rxID) :
                new ObjectParameter("RxID", typeof(int));
    
            var txContentParameter = txContent != null ?
                new ObjectParameter("TxContent", txContent) :
                new ObjectParameter("TxContent", typeof(string));
    
            var sendSourceParameter = sendSource.HasValue ?
                new ObjectParameter("SendSource", sendSource) :
                new ObjectParameter("SendSource", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetRespDataByReqData", rxIDParameter, txContentParameter, sendSourceParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_imgInsertPicInfo(string objectId, string objectRegNum, string gSMVoiceNum, Nullable<System.DateTime> gpsTime, Nullable<System.DateTime> lastDataTime, byte[] image, Nullable<int> imgChannel, string gpsData, Nullable<double> lon, Nullable<double> lat, Nullable<decimal> speed, Nullable<short> direct, Nullable<byte> gpsFlag, Nullable<bool> imgType, string mDTStatus, string statusDes, Nullable<byte> transType, Nullable<bool> isActive)
        {
            var objectIdParameter = objectId != null ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var gSMVoiceNumParameter = gSMVoiceNum != null ?
                new ObjectParameter("GSMVoiceNum", gSMVoiceNum) :
                new ObjectParameter("GSMVoiceNum", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var imgChannelParameter = imgChannel.HasValue ?
                new ObjectParameter("ImgChannel", imgChannel) :
                new ObjectParameter("ImgChannel", typeof(int));
    
            var gpsDataParameter = gpsData != null ?
                new ObjectParameter("GpsData", gpsData) :
                new ObjectParameter("GpsData", typeof(string));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(decimal));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(byte));
    
            var imgTypeParameter = imgType.HasValue ?
                new ObjectParameter("ImgType", imgType) :
                new ObjectParameter("ImgType", typeof(bool));
    
            var mDTStatusParameter = mDTStatus != null ?
                new ObjectParameter("MDTStatus", mDTStatus) :
                new ObjectParameter("MDTStatus", typeof(string));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(byte));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_imgInsertPicInfo", objectIdParameter, objectRegNumParameter, gSMVoiceNumParameter, gpsTimeParameter, lastDataTimeParameter, imageParameter, imgChannelParameter, gpsDataParameter, lonParameter, latParameter, speedParameter, directParameter, gpsFlagParameter, imgTypeParameter, mDTStatusParameter, statusDesParameter, transTypeParameter, isActiveParameter);
        }
    
        public virtual int sp_InsertMultiRegionAlarm(string objectID, Nullable<short> mDTRegionNo, Nullable<short> enterRegionType, Nullable<System.DateTime> gPSTime, Nullable<System.DateTime> recvTime, Nullable<decimal> mileage, Nullable<decimal> speed, Nullable<decimal> course, Nullable<decimal> lon, Nullable<decimal> lat, string statusDes, Nullable<decimal> fuel)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var mDTRegionNoParameter = mDTRegionNo.HasValue ?
                new ObjectParameter("MDTRegionNo", mDTRegionNo) :
                new ObjectParameter("MDTRegionNo", typeof(short));
    
            var enterRegionTypeParameter = enterRegionType.HasValue ?
                new ObjectParameter("EnterRegionType", enterRegionType) :
                new ObjectParameter("EnterRegionType", typeof(short));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var recvTimeParameter = recvTime.HasValue ?
                new ObjectParameter("RecvTime", recvTime) :
                new ObjectParameter("RecvTime", typeof(System.DateTime));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(decimal));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(decimal));
    
            var courseParameter = course.HasValue ?
                new ObjectParameter("Course", course) :
                new ObjectParameter("Course", typeof(decimal));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(decimal));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(decimal));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMultiRegionAlarm", objectIDParameter, mDTRegionNoParameter, enterRegionTypeParameter, gPSTimeParameter, recvTimeParameter, mileageParameter, speedParameter, courseParameter, lonParameter, latParameter, statusDesParameter, fuelParameter);
        }
    
        public virtual ObjectResult<sp_ObjReg_Result> sp_ObjReg(string inputParam)
        {
            var inputParamParameter = inputParam != null ?
                new ObjectParameter("InputParam", inputParam) :
                new ObjectParameter("InputParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ObjReg_Result>("sp_ObjReg", inputParamParameter);
        }
    
        public virtual ObjectResult<sp_OutputMonthReport_Result> sp_OutputMonthReport(string startDate, string endDate)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OutputMonthReport_Result>("sp_OutputMonthReport", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_OutputWeekReport_Result> sp_OutputWeekReport(string startDate, string endDate)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OutputWeekReport_Result>("sp_OutputWeekReport", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_AccountInformation_Result> sp_PGPS_AccountInformation(string userID, string parentID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var parentIDParameter = parentID != null ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_AccountInformation_Result>("sp_PGPS_AccountInformation", userIDParameter, parentIDParameter);
        }
    
        public virtual int sp_PGPS_AssignDriverTag(string driverID, string tagID)
        {
            var driverIDParameter = driverID != null ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(string));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_AssignDriverTag", driverIDParameter, tagIDParameter);
        }
    
        public virtual ObjectResult<sp_pgps_cam_asset_information_Result> sp_pgps_cam_asset_information(string assetid, Nullable<int> channelno)
        {
            var assetidParameter = assetid != null ?
                new ObjectParameter("assetid", assetid) :
                new ObjectParameter("assetid", typeof(string));
    
            var channelnoParameter = channelno.HasValue ?
                new ObjectParameter("channelno", channelno) :
                new ObjectParameter("channelno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pgps_cam_asset_information_Result>("sp_pgps_cam_asset_information", assetidParameter, channelnoParameter);
        }
    
        public virtual ObjectResult<sp_pgps_cam_asset_photo_history_Result> sp_pgps_cam_asset_photo_history(string assetid, Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> channel)
        {
            var assetidParameter = assetid != null ?
                new ObjectParameter("assetid", assetid) :
                new ObjectParameter("assetid", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var channelParameter = channel.HasValue ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pgps_cam_asset_photo_history_Result>("sp_pgps_cam_asset_photo_history", assetidParameter, startParameter, endParameter, channelParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_cannonball_getAllSegment_Result> sp_PGPS_cannonball_getAllSegment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_cannonball_getAllSegment_Result>("sp_PGPS_cannonball_getAllSegment");
        }
    
        public virtual ObjectResult<sp_PGPS_cannonball_getRankings_Result> sp_PGPS_cannonball_getRankings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_cannonball_getRankings_Result>("sp_PGPS_cannonball_getRankings");
        }
    
        public virtual int sp_PGPS_cannonball_insertSegmentToLeaderboard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_cannonball_insertSegmentToLeaderboard");
        }
    
        public virtual ObjectResult<sp_PGPS_cannonball_updateASL_Result> sp_PGPS_cannonball_updateASL(string assetId)
        {
            var assetIdParameter = assetId != null ?
                new ObjectParameter("assetId", assetId) :
                new ObjectParameter("assetId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_cannonball_updateASL_Result>("sp_PGPS_cannonball_updateASL", assetIdParameter);
        }
    
        public virtual int sp_PGPS_cannonball_updateEasy(string assetId)
        {
            var assetIdParameter = assetId != null ?
                new ObjectParameter("assetId", assetId) :
                new ObjectParameter("assetId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_cannonball_updateEasy", assetIdParameter);
        }
    
        public virtual int sp_PGPS_DeleteCustomerOrDriverOrTag(string driverID, string tagID, string customerID)
        {
            var driverIDParameter = driverID != null ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(string));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_DeleteCustomerOrDriverOrTag", driverIDParameter, tagIDParameter, customerIDParameter);
        }
    
        public virtual int sp_pgps_etl_create_db()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_pgps_etl_create_db");
        }
    
        public virtual int sp_pgps_etl_hourly_staging()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_pgps_etl_hourly_staging");
        }
    
        public virtual ObjectResult<sp_PGPS_get_active_list_Result> sp_PGPS_get_active_list()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_active_list_Result>("sp_PGPS_get_active_list");
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_active_list_Result> sp_PGPS_get_asset_active_list()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_active_list_Result>("sp_PGPS_get_asset_active_list");
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_count_list_Result> sp_PGPS_get_asset_count_list(Nullable<int> account_id)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_count_list_Result>("sp_PGPS_get_asset_count_list", account_idParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_filter_list_Result> sp_PGPS_get_asset_filter_list(Nullable<int> account_id, string status)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_filter_list_Result>("sp_PGPS_get_asset_filter_list", account_idParameter, statusParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_filter_list_export_Result> sp_PGPS_get_asset_filter_list_export(Nullable<int> account_id, string status)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_filter_list_export_Result>("sp_PGPS_get_asset_filter_list_export", account_idParameter, statusParameter);
        }
    
        public virtual int sp_PGPS_get_asset_info(string assetID)
        {
            var assetIDParameter = assetID != null ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_get_asset_info", assetIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_information_Result> sp_PGPS_get_asset_information(string assetID)
        {
            var assetIDParameter = assetID != null ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_information_Result>("sp_PGPS_get_asset_information", assetIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_information1_Result> sp_PGPS_get_asset_information1(string assetID)
        {
            var assetIDParameter = assetID != null ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_information1_Result>("sp_PGPS_get_asset_information1", assetIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_information2_Result> sp_PGPS_get_asset_information2(string assetID)
        {
            var assetIDParameter = assetID != null ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_information2_Result>("sp_PGPS_get_asset_information2", assetIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_list_Result> sp_PGPS_get_asset_list(Nullable<int> account_id)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_list_Result>("sp_PGPS_get_asset_list", account_idParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_location_Result> sp_PGPS_get_asset_location()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_location_Result>("sp_PGPS_get_asset_location");
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_map_Result> sp_PGPS_get_asset_map(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_map_Result>("sp_PGPS_get_asset_map", useridParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_map_new_Result> sp_PGPS_get_asset_map_new(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_map_new_Result>("sp_PGPS_get_asset_map_new", useridParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_notif_Result> sp_PGPS_get_asset_notif(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_notif_Result>("sp_PGPS_get_asset_notif", userIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_popup_information_Result> sp_PGPS_get_asset_popup_information(string assetID)
        {
            var assetIDParameter = assetID != null ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_popup_information_Result>("sp_PGPS_get_asset_popup_information", assetIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_popup_information_new_Result> sp_PGPS_get_asset_popup_information_new(string assetID)
        {
            var assetIDParameter = assetID != null ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_popup_information_new_Result>("sp_PGPS_get_asset_popup_information_new", assetIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_popup_information1_Result> sp_PGPS_get_asset_popup_information1(string assetID)
        {
            var assetIDParameter = assetID != null ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_popup_information1_Result>("sp_PGPS_get_asset_popup_information1", assetIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_type_list_Result> sp_PGPS_get_asset_type_list(Nullable<int> account_id, string type)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_type_list_Result>("sp_PGPS_get_asset_type_list", account_idParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_violation_list_Result> sp_PGPS_get_asset_violation_list(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_violation_list_Result>("sp_PGPS_get_asset_violation_list", userIDParameter);
        }
    
        public virtual ObjectResult<sp_pgps_get_assets_inside_zone_Result> sp_pgps_get_assets_inside_zone(string objectlist)
        {
            var objectlistParameter = objectlist != null ?
                new ObjectParameter("objectlist", objectlist) :
                new ObjectParameter("objectlist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pgps_get_assets_inside_zone_Result>("sp_pgps_get_assets_inside_zone", objectlistParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_pgps_get_assets_inside_zone_count(string account_id)
        {
            var account_idParameter = account_id != null ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_pgps_get_assets_inside_zone_count", account_idParameter);
        }
    
        public virtual ObjectResult<sp_pgps_get_gps_activity_Result> sp_pgps_get_gps_activity(string objectlist, string tablename)
        {
            var objectlistParameter = objectlist != null ?
                new ObjectParameter("objectlist", objectlist) :
                new ObjectParameter("objectlist", typeof(string));
    
            var tablenameParameter = tablename != null ?
                new ObjectParameter("tablename", tablename) :
                new ObjectParameter("tablename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pgps_get_gps_activity_Result>("sp_pgps_get_gps_activity", objectlistParameter, tablenameParameter);
        }
    
        public virtual ObjectResult<sp_pgps_get_ObjectDelivery_Result> sp_pgps_get_ObjectDelivery(string assetid)
        {
            var assetidParameter = assetid != null ?
                new ObjectParameter("assetid", assetid) :
                new ObjectParameter("assetid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pgps_get_ObjectDelivery_Result>("sp_pgps_get_ObjectDelivery", assetidParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_roles_list_Result> sp_PGPS_get_roles_list(Nullable<int> rolevalue)
        {
            var rolevalueParameter = rolevalue.HasValue ?
                new ObjectParameter("rolevalue", rolevalue) :
                new ObjectParameter("rolevalue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_roles_list_Result>("sp_PGPS_get_roles_list", rolevalueParameter);
        }
    
        public virtual int sp_PGPS_get_summary_info()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_get_summary_info");
        }
    
        public virtual int sp_PGPS_get_summary_info_account(Nullable<int> account_id)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_get_summary_info_account", account_idParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_summary_info_assetid_Result> sp_PGPS_get_summary_info_assetid(string assetids)
        {
            var assetidsParameter = assetids != null ?
                new ObjectParameter("assetids", assetids) :
                new ObjectParameter("assetids", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_summary_info_assetid_Result>("sp_PGPS_get_summary_info_assetid", assetidsParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_summary_info_assetid_bckup_Result> sp_PGPS_get_summary_info_assetid_bckup(string assetids)
        {
            var assetidsParameter = assetids != null ?
                new ObjectParameter("assetids", assetids) :
                new ObjectParameter("assetids", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_summary_info_assetid_bckup_Result>("sp_PGPS_get_summary_info_assetid_bckup", assetidsParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_summary_info_group_Result> sp_PGPS_get_summary_info_group(string groupcodes)
        {
            var groupcodesParameter = groupcodes != null ?
                new ObjectParameter("groupcodes", groupcodes) :
                new ObjectParameter("groupcodes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_summary_info_group_Result>("sp_PGPS_get_summary_info_group", groupcodesParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_summary_info_sysuser_Result> sp_PGPS_get_summary_info_sysuser(Nullable<int> account_id)
        {
            var account_idParameter = account_id.HasValue ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_summary_info_sysuser_Result>("sp_PGPS_get_summary_info_sysuser", account_idParameter);
        }
    
        public virtual ObjectResult<sp_pgps_GetCounterByUserID_Result> sp_pgps_GetCounterByUserID(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pgps_GetCounterByUserID_Result>("sp_pgps_GetCounterByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_GetFuelHistory_Staging_Result> sp_PGPS_GetFuelHistory_Staging(string objectid, string tableName, string start, string end)
        {
            var objectidParameter = objectid != null ?
                new ObjectParameter("objectid", objectid) :
                new ObjectParameter("objectid", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var startParameter = start != null ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_GetFuelHistory_Staging_Result>("sp_PGPS_GetFuelHistory_Staging", objectidParameter, tableNameParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_getObjectInfoList_Result> sp_PGPS_getObjectInfoList(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_getObjectInfoList_Result>("sp_PGPS_getObjectInfoList", customerIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_getObjectRoles_Result> sp_PGPS_getObjectRoles(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_getObjectRoles_Result>("sp_PGPS_getObjectRoles", useridParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_getObjectSensorSetting_Result> sp_PGPS_getObjectSensorSetting(string objectid)
        {
            var objectidParameter = objectid != null ?
                new ObjectParameter("objectid", objectid) :
                new ObjectParameter("objectid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_getObjectSensorSetting_Result>("sp_PGPS_getObjectSensorSetting", objectidParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_GetTempHistory_Staging_Result> sp_PGPS_GetTempHistory_Staging(string objectid, string tableName, string start, string end)
        {
            var objectidParameter = objectid != null ?
                new ObjectParameter("objectid", objectid) :
                new ObjectParameter("objectid", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var startParameter = start != null ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_GetTempHistory_Staging_Result>("sp_PGPS_GetTempHistory_Staging", objectidParameter, tableNameParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_GetTrackHistory_Staging_Result> sp_PGPS_GetTrackHistory_Staging(string objectid, string tableName, string start, string end)
        {
            var objectidParameter = objectid != null ?
                new ObjectParameter("objectid", objectid) :
                new ObjectParameter("objectid", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var startParameter = start != null ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_GetTrackHistory_Staging_Result>("sp_PGPS_GetTrackHistory_Staging", objectidParameter, tableNameParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<sp_pgps_GetVehicleDistance_Result> sp_pgps_GetVehicleDistance(string userID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pgps_GetVehicleDistance_Result>("sp_pgps_GetVehicleDistance", userIDParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<sp_pgps_GetVehicleUtili_Result> sp_pgps_GetVehicleUtili(string userID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pgps_GetVehicleUtili_Result>("sp_pgps_GetVehicleUtili", userIDParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_history_summary_Result> sp_PGPS_history_summary(string objectid, string tableName, Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var objectidParameter = objectid != null ?
                new ObjectParameter("objectid", objectid) :
                new ObjectParameter("objectid", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_history_summary_Result>("sp_PGPS_history_summary", objectidParameter, tableNameParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_history_summary_new_Result> sp_PGPS_history_summary_new(string objectid, string tableName, Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var objectidParameter = objectid != null ?
                new ObjectParameter("objectid", objectid) :
                new ObjectParameter("objectid", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_history_summary_new_Result>("sp_PGPS_history_summary_new", objectidParameter, tableNameParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_history_summary_old_Result> sp_PGPS_history_summary_old(string objectid, string tableName, Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var objectidParameter = objectid != null ?
                new ObjectParameter("objectid", objectid) :
                new ObjectParameter("objectid", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_history_summary_old_Result>("sp_PGPS_history_summary_old", objectidParameter, tableNameParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_history_summary_sat_Result> sp_PGPS_history_summary_sat(string objectid, string tableName, Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var objectidParameter = objectid != null ?
                new ObjectParameter("objectid", objectid) :
                new ObjectParameter("objectid", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_history_summary_sat_Result>("sp_PGPS_history_summary_sat", objectidParameter, tableNameParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_history_summary_test_Result> sp_PGPS_history_summary_test(string objectid, string tableName, string start, string end)
        {
            var objectidParameter = objectid != null ?
                new ObjectParameter("objectid", objectid) :
                new ObjectParameter("objectid", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var startParameter = start != null ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_history_summary_test_Result>("sp_PGPS_history_summary_test", objectidParameter, tableNameParameter, startParameter, endParameter);
        }
    
        public virtual int sp_PGPS_MaintenanceReminderCRUD(Nullable<System.DateTime> date_expire, Nullable<int> type_id, Nullable<int> category_id, string asset_id, Nullable<bool> repeat_reminder, string other_details, Nullable<int> odo_current, Nullable<int> odo_next, Nullable<int> gpsodo_next, Nullable<int> gpsodo_current, string vendor, Nullable<int> cost, Nullable<int> maintenance_activity_id, string maintenance_function, Nullable<System.DateTime> date_completed, Nullable<int> user_id, Nullable<int> reminder_time, Nullable<int> reminder_odo, Nullable<bool> is_deleted)
        {
            var date_expireParameter = date_expire.HasValue ?
                new ObjectParameter("date_expire", date_expire) :
                new ObjectParameter("date_expire", typeof(System.DateTime));
    
            var type_idParameter = type_id.HasValue ?
                new ObjectParameter("type_id", type_id) :
                new ObjectParameter("type_id", typeof(int));
    
            var category_idParameter = category_id.HasValue ?
                new ObjectParameter("category_id", category_id) :
                new ObjectParameter("category_id", typeof(int));
    
            var asset_idParameter = asset_id != null ?
                new ObjectParameter("asset_id", asset_id) :
                new ObjectParameter("asset_id", typeof(string));
    
            var repeat_reminderParameter = repeat_reminder.HasValue ?
                new ObjectParameter("repeat_reminder", repeat_reminder) :
                new ObjectParameter("repeat_reminder", typeof(bool));
    
            var other_detailsParameter = other_details != null ?
                new ObjectParameter("other_details", other_details) :
                new ObjectParameter("other_details", typeof(string));
    
            var odo_currentParameter = odo_current.HasValue ?
                new ObjectParameter("odo_current", odo_current) :
                new ObjectParameter("odo_current", typeof(int));
    
            var odo_nextParameter = odo_next.HasValue ?
                new ObjectParameter("odo_next", odo_next) :
                new ObjectParameter("odo_next", typeof(int));
    
            var gpsodo_nextParameter = gpsodo_next.HasValue ?
                new ObjectParameter("gpsodo_next", gpsodo_next) :
                new ObjectParameter("gpsodo_next", typeof(int));
    
            var gpsodo_currentParameter = gpsodo_current.HasValue ?
                new ObjectParameter("gpsodo_current", gpsodo_current) :
                new ObjectParameter("gpsodo_current", typeof(int));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("vendor", vendor) :
                new ObjectParameter("vendor", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(int));
    
            var maintenance_activity_idParameter = maintenance_activity_id.HasValue ?
                new ObjectParameter("maintenance_activity_id", maintenance_activity_id) :
                new ObjectParameter("maintenance_activity_id", typeof(int));
    
            var maintenance_functionParameter = maintenance_function != null ?
                new ObjectParameter("maintenance_function", maintenance_function) :
                new ObjectParameter("maintenance_function", typeof(string));
    
            var date_completedParameter = date_completed.HasValue ?
                new ObjectParameter("date_completed", date_completed) :
                new ObjectParameter("date_completed", typeof(System.DateTime));
    
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var reminder_timeParameter = reminder_time.HasValue ?
                new ObjectParameter("reminder_time", reminder_time) :
                new ObjectParameter("reminder_time", typeof(int));
    
            var reminder_odoParameter = reminder_odo.HasValue ?
                new ObjectParameter("reminder_odo", reminder_odo) :
                new ObjectParameter("reminder_odo", typeof(int));
    
            var is_deletedParameter = is_deleted.HasValue ?
                new ObjectParameter("is_deleted", is_deleted) :
                new ObjectParameter("is_deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_MaintenanceReminderCRUD", date_expireParameter, type_idParameter, category_idParameter, asset_idParameter, repeat_reminderParameter, other_detailsParameter, odo_currentParameter, odo_nextParameter, gpsodo_nextParameter, gpsodo_currentParameter, vendorParameter, costParameter, maintenance_activity_idParameter, maintenance_functionParameter, date_completedParameter, user_idParameter, reminder_timeParameter, reminder_odoParameter, is_deletedParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_telegram_alerts_Result> sp_PGPS_telegram_alerts(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_telegram_alerts_Result>("sp_PGPS_telegram_alerts", userIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_track_asset_by_assetid_Result> sp_PGPS_track_asset_by_assetid(string assetID, string username)
        {
            var assetIDParameter = assetID != null ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_track_asset_by_assetid_Result>("sp_PGPS_track_asset_by_assetid", assetIDParameter, usernameParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_track_asset_by_assetname_Result> sp_PGPS_track_asset_by_assetname(string assetName, string username)
        {
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_track_asset_by_assetname_Result>("sp_PGPS_track_asset_by_assetname", assetNameParameter, usernameParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_TRP_GetCurrentActiveDriver_Result> sp_PGPS_TRP_GetCurrentActiveDriver(string assetid)
        {
            var assetidParameter = assetid != null ?
                new ObjectParameter("assetid", assetid) :
                new ObjectParameter("assetid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_TRP_GetCurrentActiveDriver_Result>("sp_PGPS_TRP_GetCurrentActiveDriver", assetidParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_TRP_getHistoryDriverList_Result> sp_PGPS_TRP_getHistoryDriverList(string assetid)
        {
            var assetidParameter = assetid != null ?
                new ObjectParameter("assetid", assetid) :
                new ObjectParameter("assetid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_TRP_getHistoryDriverList_Result>("sp_PGPS_TRP_getHistoryDriverList", assetidParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_TRP_getUserChildAssignmentList_Result> sp_PGPS_TRP_getUserChildAssignmentList(string account_id, string childAccount_id)
        {
            var account_idParameter = account_id != null ?
                new ObjectParameter("account_id", account_id) :
                new ObjectParameter("account_id", typeof(string));
    
            var childAccount_idParameter = childAccount_id != null ?
                new ObjectParameter("childAccount_id", childAccount_id) :
                new ObjectParameter("childAccount_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_TRP_getUserChildAssignmentList_Result>("sp_PGPS_TRP_getUserChildAssignmentList", account_idParameter, childAccount_idParameter);
        }
    
        public virtual int sp_PGPS_TRP_UpdatePassword(string accountID, string oldPassword, string newPassword, string newEncryptedPassword)
        {
            var accountIDParameter = accountID != null ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(string));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("oldPassword", oldPassword) :
                new ObjectParameter("oldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("newPassword", newPassword) :
                new ObjectParameter("newPassword", typeof(string));
    
            var newEncryptedPasswordParameter = newEncryptedPassword != null ?
                new ObjectParameter("newEncryptedPassword", newEncryptedPassword) :
                new ObjectParameter("newEncryptedPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_TRP_UpdatePassword", accountIDParameter, oldPasswordParameter, newPasswordParameter, newEncryptedPasswordParameter);
        }
    
        public virtual int sp_PGPS_TRP_UpdateUserEmail(string accountID, string email)
        {
            var accountIDParameter = accountID != null ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_TRP_UpdateUserEmail", accountIDParameter, emailParameter);
        }
    
        public virtual ObjectResult<SP_PGPS_UPDATE_MAINTENANCE_ODO_Result> SP_PGPS_UPDATE_MAINTENANCE_ODO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PGPS_UPDATE_MAINTENANCE_ODO_Result>("SP_PGPS_UPDATE_MAINTENANCE_ODO");
        }
    
        public virtual int sp_PGPS_UpdateLogs(string name, string module, string type, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var moduleParameter = module != null ?
                new ObjectParameter("module", module) :
                new ObjectParameter("module", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PGPS_UpdateLogs", nameParameter, moduleParameter, typeParameter, descriptionParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_Search_Result> sp_Search(string inputParam, Nullable<System.DateTime> inputSDate, Nullable<System.DateTime> inputEDate)
        {
            var inputParamParameter = inputParam != null ?
                new ObjectParameter("InputParam", inputParam) :
                new ObjectParameter("InputParam", typeof(string));
    
            var inputSDateParameter = inputSDate.HasValue ?
                new ObjectParameter("InputSDate", inputSDate) :
                new ObjectParameter("InputSDate", typeof(System.DateTime));
    
            var inputEDateParameter = inputEDate.HasValue ?
                new ObjectParameter("InputEDate", inputEDate) :
                new ObjectParameter("InputEDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Search_Result>("sp_Search", inputParamParameter, inputSDateParameter, inputEDateParameter);
        }
    
        public virtual ObjectResult<sp_SysRoll_Result> sp_SysRoll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SysRoll_Result>("sp_SysRoll");
        }
    
        public virtual int sp_SysUserAdd(string inputName, string inputPass, Nullable<int> inputGrpID, string inputRoleID, string inputCreatUser)
        {
            var inputNameParameter = inputName != null ?
                new ObjectParameter("InputName", inputName) :
                new ObjectParameter("InputName", typeof(string));
    
            var inputPassParameter = inputPass != null ?
                new ObjectParameter("InputPass", inputPass) :
                new ObjectParameter("InputPass", typeof(string));
    
            var inputGrpIDParameter = inputGrpID.HasValue ?
                new ObjectParameter("InputGrpID", inputGrpID) :
                new ObjectParameter("InputGrpID", typeof(int));
    
            var inputRoleIDParameter = inputRoleID != null ?
                new ObjectParameter("InputRoleID", inputRoleID) :
                new ObjectParameter("InputRoleID", typeof(string));
    
            var inputCreatUserParameter = inputCreatUser != null ?
                new ObjectParameter("InputCreatUser", inputCreatUser) :
                new ObjectParameter("InputCreatUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SysUserAdd", inputNameParameter, inputPassParameter, inputGrpIDParameter, inputRoleIDParameter, inputCreatUserParameter);
        }
    
        public virtual ObjectResult<sp_SysUserSearch_Result> sp_SysUserSearch(string inputParam, string inputName)
        {
            var inputParamParameter = inputParam != null ?
                new ObjectParameter("InputParam", inputParam) :
                new ObjectParameter("InputParam", typeof(string));
    
            var inputNameParameter = inputName != null ?
                new ObjectParameter("InputName", inputName) :
                new ObjectParameter("InputName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SysUserSearch_Result>("sp_SysUserSearch", inputParamParameter, inputNameParameter);
        }
    
        public virtual int sp_UpdateObjectInfoMe(string objectRegNum, string gSMVoiceNum, string gSMDataNum, Nullable<int> gISGroupId, Nullable<System.DateTime> objectRegDate)
        {
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var gSMVoiceNumParameter = gSMVoiceNum != null ?
                new ObjectParameter("GSMVoiceNum", gSMVoiceNum) :
                new ObjectParameter("GSMVoiceNum", typeof(string));
    
            var gSMDataNumParameter = gSMDataNum != null ?
                new ObjectParameter("GSMDataNum", gSMDataNum) :
                new ObjectParameter("GSMDataNum", typeof(string));
    
            var gISGroupIdParameter = gISGroupId.HasValue ?
                new ObjectParameter("GISGroupId", gISGroupId) :
                new ObjectParameter("GISGroupId", typeof(int));
    
            var objectRegDateParameter = objectRegDate.HasValue ?
                new ObjectParameter("ObjectRegDate", objectRegDate) :
                new ObjectParameter("ObjectRegDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateObjectInfoMe", objectRegNumParameter, gSMVoiceNumParameter, gSMDataNumParameter, gISGroupIdParameter, objectRegDateParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_UserValidateOperate_Result> sp_UserValidateOperate(string inputParam, string inputName, string inputPass)
        {
            var inputParamParameter = inputParam != null ?
                new ObjectParameter("InputParam", inputParam) :
                new ObjectParameter("InputParam", typeof(string));
    
            var inputNameParameter = inputName != null ?
                new ObjectParameter("InputName", inputName) :
                new ObjectParameter("InputName", typeof(string));
    
            var inputPassParameter = inputPass != null ?
                new ObjectParameter("InputPass", inputPass) :
                new ObjectParameter("InputPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserValidateOperate_Result>("sp_UserValidateOperate", inputParamParameter, inputNameParameter, inputPassParameter);
        }
    
        public virtual int spAcceptSue(string rEGISTERNO, string uSERNAME, string sueResult, string reason)
        {
            var rEGISTERNOParameter = rEGISTERNO != null ?
                new ObjectParameter("REGISTERNO", rEGISTERNO) :
                new ObjectParameter("REGISTERNO", typeof(string));
    
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            var sueResultParameter = sueResult != null ?
                new ObjectParameter("SueResult", sueResult) :
                new ObjectParameter("SueResult", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAcceptSue", rEGISTERNOParameter, uSERNAMEParameter, sueResultParameter, reasonParameter);
        }
    
        public virtual int spCreateObject(Nullable<int> customerID, string objectID, string userName, string password, string driverWorkID, string driver_Name, string driverCard_No, Nullable<byte> driverCard_Type, string mobilePhone, string homePhone, string sex, string contactMan1, string contactPhone1, string mobilePhone1, string contactMan2, string contactPhone2, string mobilePhone2, string terminalID, string mDTCompany, string mDTType, string protocolVer, string deviceType, string objectRegNum, string gSMVoiceNum, Nullable<int> gISGroupID, Nullable<byte> commChannel, Nullable<byte> objectType, string objectColor, Nullable<System.DateTime> objectREgDate, string monitorCorp, string contactName, string contactPhone, string contactBP, string contactAddr, string objectModel, Nullable<int> createUserID, string serviceProvider, string writer, string writeDate, string contractNo, string installBillId, Nullable<decimal> serviceFee, Nullable<byte> serviceType, Nullable<byte> fuelType, Nullable<decimal> fuelRatio, string objectBrand, string accessory, Nullable<int> interval)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var driverWorkIDParameter = driverWorkID != null ?
                new ObjectParameter("DriverWorkID", driverWorkID) :
                new ObjectParameter("DriverWorkID", typeof(string));
    
            var driver_NameParameter = driver_Name != null ?
                new ObjectParameter("Driver_Name", driver_Name) :
                new ObjectParameter("Driver_Name", typeof(string));
    
            var driverCard_NoParameter = driverCard_No != null ?
                new ObjectParameter("DriverCard_No", driverCard_No) :
                new ObjectParameter("DriverCard_No", typeof(string));
    
            var driverCard_TypeParameter = driverCard_Type.HasValue ?
                new ObjectParameter("DriverCard_Type", driverCard_Type) :
                new ObjectParameter("DriverCard_Type", typeof(byte));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var contactMan1Parameter = contactMan1 != null ?
                new ObjectParameter("ContactMan1", contactMan1) :
                new ObjectParameter("ContactMan1", typeof(string));
    
            var contactPhone1Parameter = contactPhone1 != null ?
                new ObjectParameter("ContactPhone1", contactPhone1) :
                new ObjectParameter("ContactPhone1", typeof(string));
    
            var mobilePhone1Parameter = mobilePhone1 != null ?
                new ObjectParameter("MobilePhone1", mobilePhone1) :
                new ObjectParameter("MobilePhone1", typeof(string));
    
            var contactMan2Parameter = contactMan2 != null ?
                new ObjectParameter("ContactMan2", contactMan2) :
                new ObjectParameter("ContactMan2", typeof(string));
    
            var contactPhone2Parameter = contactPhone2 != null ?
                new ObjectParameter("ContactPhone2", contactPhone2) :
                new ObjectParameter("ContactPhone2", typeof(string));
    
            var mobilePhone2Parameter = mobilePhone2 != null ?
                new ObjectParameter("MobilePhone2", mobilePhone2) :
                new ObjectParameter("MobilePhone2", typeof(string));
    
            var terminalIDParameter = terminalID != null ?
                new ObjectParameter("TerminalID", terminalID) :
                new ObjectParameter("TerminalID", typeof(string));
    
            var mDTCompanyParameter = mDTCompany != null ?
                new ObjectParameter("MDTCompany", mDTCompany) :
                new ObjectParameter("MDTCompany", typeof(string));
    
            var mDTTypeParameter = mDTType != null ?
                new ObjectParameter("MDTType", mDTType) :
                new ObjectParameter("MDTType", typeof(string));
    
            var protocolVerParameter = protocolVer != null ?
                new ObjectParameter("ProtocolVer", protocolVer) :
                new ObjectParameter("ProtocolVer", typeof(string));
    
            var deviceTypeParameter = deviceType != null ?
                new ObjectParameter("DeviceType", deviceType) :
                new ObjectParameter("DeviceType", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var gSMVoiceNumParameter = gSMVoiceNum != null ?
                new ObjectParameter("GSMVoiceNum", gSMVoiceNum) :
                new ObjectParameter("GSMVoiceNum", typeof(string));
    
            var gISGroupIDParameter = gISGroupID.HasValue ?
                new ObjectParameter("GISGroupID", gISGroupID) :
                new ObjectParameter("GISGroupID", typeof(int));
    
            var commChannelParameter = commChannel.HasValue ?
                new ObjectParameter("CommChannel", commChannel) :
                new ObjectParameter("CommChannel", typeof(byte));
    
            var objectTypeParameter = objectType.HasValue ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(byte));
    
            var objectColorParameter = objectColor != null ?
                new ObjectParameter("ObjectColor", objectColor) :
                new ObjectParameter("ObjectColor", typeof(string));
    
            var objectREgDateParameter = objectREgDate.HasValue ?
                new ObjectParameter("ObjectREgDate", objectREgDate) :
                new ObjectParameter("ObjectREgDate", typeof(System.DateTime));
    
            var monitorCorpParameter = monitorCorp != null ?
                new ObjectParameter("MonitorCorp", monitorCorp) :
                new ObjectParameter("MonitorCorp", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var contactBPParameter = contactBP != null ?
                new ObjectParameter("ContactBP", contactBP) :
                new ObjectParameter("ContactBP", typeof(string));
    
            var contactAddrParameter = contactAddr != null ?
                new ObjectParameter("ContactAddr", contactAddr) :
                new ObjectParameter("ContactAddr", typeof(string));
    
            var objectModelParameter = objectModel != null ?
                new ObjectParameter("ObjectModel", objectModel) :
                new ObjectParameter("ObjectModel", typeof(string));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var serviceProviderParameter = serviceProvider != null ?
                new ObjectParameter("ServiceProvider", serviceProvider) :
                new ObjectParameter("ServiceProvider", typeof(string));
    
            var writerParameter = writer != null ?
                new ObjectParameter("Writer", writer) :
                new ObjectParameter("Writer", typeof(string));
    
            var writeDateParameter = writeDate != null ?
                new ObjectParameter("WriteDate", writeDate) :
                new ObjectParameter("WriteDate", typeof(string));
    
            var contractNoParameter = contractNo != null ?
                new ObjectParameter("ContractNo", contractNo) :
                new ObjectParameter("ContractNo", typeof(string));
    
            var installBillIdParameter = installBillId != null ?
                new ObjectParameter("InstallBillId", installBillId) :
                new ObjectParameter("InstallBillId", typeof(string));
    
            var serviceFeeParameter = serviceFee.HasValue ?
                new ObjectParameter("ServiceFee", serviceFee) :
                new ObjectParameter("ServiceFee", typeof(decimal));
    
            var serviceTypeParameter = serviceType.HasValue ?
                new ObjectParameter("ServiceType", serviceType) :
                new ObjectParameter("ServiceType", typeof(byte));
    
            var fuelTypeParameter = fuelType.HasValue ?
                new ObjectParameter("FuelType", fuelType) :
                new ObjectParameter("FuelType", typeof(byte));
    
            var fuelRatioParameter = fuelRatio.HasValue ?
                new ObjectParameter("FuelRatio", fuelRatio) :
                new ObjectParameter("FuelRatio", typeof(decimal));
    
            var objectBrandParameter = objectBrand != null ?
                new ObjectParameter("ObjectBrand", objectBrand) :
                new ObjectParameter("ObjectBrand", typeof(string));
    
            var accessoryParameter = accessory != null ?
                new ObjectParameter("Accessory", accessory) :
                new ObjectParameter("Accessory", typeof(string));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateObject", customerIDParameter, objectIDParameter, userNameParameter, passwordParameter, driverWorkIDParameter, driver_NameParameter, driverCard_NoParameter, driverCard_TypeParameter, mobilePhoneParameter, homePhoneParameter, sexParameter, contactMan1Parameter, contactPhone1Parameter, mobilePhone1Parameter, contactMan2Parameter, contactPhone2Parameter, mobilePhone2Parameter, terminalIDParameter, mDTCompanyParameter, mDTTypeParameter, protocolVerParameter, deviceTypeParameter, objectRegNumParameter, gSMVoiceNumParameter, gISGroupIDParameter, commChannelParameter, objectTypeParameter, objectColorParameter, objectREgDateParameter, monitorCorpParameter, contactNameParameter, contactPhoneParameter, contactBPParameter, contactAddrParameter, objectModelParameter, createUserIDParameter, serviceProviderParameter, writerParameter, writeDateParameter, contractNoParameter, installBillIdParameter, serviceFeeParameter, serviceTypeParameter, fuelTypeParameter, fuelRatioParameter, objectBrandParameter, accessoryParameter, intervalParameter);
        }
    
        public virtual int spDyanCitraUpdateEvent(string gpsId, Nullable<short> eventType, Nullable<short> eventStatus, string statusDes, Nullable<System.DateTime> gpsTime, Nullable<int> mileage, Nullable<double> lon, Nullable<double> lat, Nullable<short> speed, Nullable<short> direct, Nullable<short> gpsFlag, Nullable<short> fuel)
        {
            var gpsIdParameter = gpsId != null ?
                new ObjectParameter("GpsId", gpsId) :
                new ObjectParameter("GpsId", typeof(string));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(short));
    
            var eventStatusParameter = eventStatus.HasValue ?
                new ObjectParameter("EventStatus", eventStatus) :
                new ObjectParameter("EventStatus", typeof(short));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanCitraUpdateEvent", gpsIdParameter, eventTypeParameter, eventStatusParameter, statusDesParameter, gpsTimeParameter, mileageParameter, lonParameter, latParameter, speedParameter, directParameter, gpsFlagParameter, fuelParameter);
        }
    
        public virtual int spDyanCitraUpdateEventHarsh(string gpsId, Nullable<short> eventType, Nullable<short> eventStatus, string statusDes, Nullable<System.DateTime> gpsTime, Nullable<System.DateTime> lastDataTime, Nullable<int> mileage, Nullable<double> lon, Nullable<double> lat, Nullable<short> speed, Nullable<short> direct, Nullable<short> gpsFlag, Nullable<short> fuel)
        {
            var gpsIdParameter = gpsId != null ?
                new ObjectParameter("GpsId", gpsId) :
                new ObjectParameter("GpsId", typeof(string));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(short));
    
            var eventStatusParameter = eventStatus.HasValue ?
                new ObjectParameter("EventStatus", eventStatus) :
                new ObjectParameter("EventStatus", typeof(short));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanCitraUpdateEventHarsh", gpsIdParameter, eventTypeParameter, eventStatusParameter, statusDesParameter, gpsTimeParameter, lastDataTimeParameter, mileageParameter, lonParameter, latParameter, speedParameter, directParameter, gpsFlagParameter, fuelParameter);
        }
    
        public virtual int spDyanCitraUpdateEventNew(string gpsId, Nullable<short> eventType, Nullable<short> eventStatus, string statusDes, Nullable<System.DateTime> gpsTime, Nullable<int> mileage, Nullable<double> lon, Nullable<double> lat, Nullable<short> speed, Nullable<short> direct, Nullable<short> gpsFlag, Nullable<short> fuel)
        {
            var gpsIdParameter = gpsId != null ?
                new ObjectParameter("GpsId", gpsId) :
                new ObjectParameter("GpsId", typeof(string));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(short));
    
            var eventStatusParameter = eventStatus.HasValue ?
                new ObjectParameter("EventStatus", eventStatus) :
                new ObjectParameter("EventStatus", typeof(short));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanCitraUpdateEventNew", gpsIdParameter, eventTypeParameter, eventStatusParameter, statusDesParameter, gpsTimeParameter, mileageParameter, lonParameter, latParameter, speedParameter, directParameter, gpsFlagParameter, fuelParameter);
        }
    
        public virtual int spDyanCitraUpdateHistory(string deviceId, string objectRegNum, string simcard, Nullable<System.DateTime> gpsTime, Nullable<System.DateTime> lastDataTime, Nullable<short> speed, Nullable<short> direct, Nullable<double> lon, Nullable<double> lat, Nullable<short> gpsFlag, Nullable<long> odo, Nullable<int> codeAcc, Nullable<int> codeSensor, Nullable<int> codeSos, Nullable<int> codeBatCut, Nullable<int> fuel, ObjectParameter result)
        {
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var simcardParameter = simcard != null ?
                new ObjectParameter("Simcard", simcard) :
                new ObjectParameter("Simcard", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var odoParameter = odo.HasValue ?
                new ObjectParameter("Odo", odo) :
                new ObjectParameter("Odo", typeof(long));
    
            var codeAccParameter = codeAcc.HasValue ?
                new ObjectParameter("CodeAcc", codeAcc) :
                new ObjectParameter("CodeAcc", typeof(int));
    
            var codeSensorParameter = codeSensor.HasValue ?
                new ObjectParameter("CodeSensor", codeSensor) :
                new ObjectParameter("CodeSensor", typeof(int));
    
            var codeSosParameter = codeSos.HasValue ?
                new ObjectParameter("CodeSos", codeSos) :
                new ObjectParameter("CodeSos", typeof(int));
    
            var codeBatCutParameter = codeBatCut.HasValue ?
                new ObjectParameter("CodeBatCut", codeBatCut) :
                new ObjectParameter("CodeBatCut", typeof(int));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanCitraUpdateHistory", deviceIdParameter, objectRegNumParameter, simcardParameter, gpsTimeParameter, lastDataTimeParameter, speedParameter, directParameter, lonParameter, latParameter, gpsFlagParameter, odoParameter, codeAccParameter, codeSensorParameter, codeSosParameter, codeBatCutParameter, fuelParameter, result);
        }
    
        public virtual int spDyanCitraUpdatePosition(string deviceId, string objectRegNum, string simcard, Nullable<System.DateTime> gpsTime, Nullable<System.DateTime> lastDataTime, Nullable<short> speed, Nullable<short> direct, Nullable<double> lon, Nullable<double> lat, Nullable<short> gpsFlag, Nullable<long> odo, Nullable<int> codeAcc, Nullable<int> codeSensor, Nullable<int> codeSos, Nullable<int> codeEngineStop, Nullable<int> codeBatCut, Nullable<double> fuel, Nullable<int> overspeed, Nullable<decimal> temp1, ObjectParameter result)
        {
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var simcardParameter = simcard != null ?
                new ObjectParameter("Simcard", simcard) :
                new ObjectParameter("Simcard", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var odoParameter = odo.HasValue ?
                new ObjectParameter("Odo", odo) :
                new ObjectParameter("Odo", typeof(long));
    
            var codeAccParameter = codeAcc.HasValue ?
                new ObjectParameter("CodeAcc", codeAcc) :
                new ObjectParameter("CodeAcc", typeof(int));
    
            var codeSensorParameter = codeSensor.HasValue ?
                new ObjectParameter("CodeSensor", codeSensor) :
                new ObjectParameter("CodeSensor", typeof(int));
    
            var codeSosParameter = codeSos.HasValue ?
                new ObjectParameter("CodeSos", codeSos) :
                new ObjectParameter("CodeSos", typeof(int));
    
            var codeEngineStopParameter = codeEngineStop.HasValue ?
                new ObjectParameter("CodeEngineStop", codeEngineStop) :
                new ObjectParameter("CodeEngineStop", typeof(int));
    
            var codeBatCutParameter = codeBatCut.HasValue ?
                new ObjectParameter("CodeBatCut", codeBatCut) :
                new ObjectParameter("CodeBatCut", typeof(int));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(double));
    
            var overspeedParameter = overspeed.HasValue ?
                new ObjectParameter("Overspeed", overspeed) :
                new ObjectParameter("Overspeed", typeof(int));
    
            var temp1Parameter = temp1.HasValue ?
                new ObjectParameter("Temp1", temp1) :
                new ObjectParameter("Temp1", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanCitraUpdatePosition", deviceIdParameter, objectRegNumParameter, simcardParameter, gpsTimeParameter, lastDataTimeParameter, speedParameter, directParameter, lonParameter, latParameter, gpsFlagParameter, odoParameter, codeAccParameter, codeSensorParameter, codeSosParameter, codeEngineStopParameter, codeBatCutParameter, fuelParameter, overspeedParameter, temp1Parameter, result);
        }
    
        public virtual int spDyanCitraUpdatePosition_old1(string deviceId, string objectRegNum, string simcard, Nullable<System.DateTime> gpsTime, Nullable<System.DateTime> lastDataTime, Nullable<short> speed, Nullable<short> direct, Nullable<double> lon, Nullable<double> lat, Nullable<short> gpsFlag, Nullable<long> odo, Nullable<int> codeAcc, Nullable<int> codeSensor, Nullable<int> codeSos, Nullable<int> codeEngineStop, Nullable<int> codeBatCut, Nullable<int> fuel, Nullable<int> overspeed, ObjectParameter result)
        {
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var simcardParameter = simcard != null ?
                new ObjectParameter("Simcard", simcard) :
                new ObjectParameter("Simcard", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var odoParameter = odo.HasValue ?
                new ObjectParameter("Odo", odo) :
                new ObjectParameter("Odo", typeof(long));
    
            var codeAccParameter = codeAcc.HasValue ?
                new ObjectParameter("CodeAcc", codeAcc) :
                new ObjectParameter("CodeAcc", typeof(int));
    
            var codeSensorParameter = codeSensor.HasValue ?
                new ObjectParameter("CodeSensor", codeSensor) :
                new ObjectParameter("CodeSensor", typeof(int));
    
            var codeSosParameter = codeSos.HasValue ?
                new ObjectParameter("CodeSos", codeSos) :
                new ObjectParameter("CodeSos", typeof(int));
    
            var codeEngineStopParameter = codeEngineStop.HasValue ?
                new ObjectParameter("CodeEngineStop", codeEngineStop) :
                new ObjectParameter("CodeEngineStop", typeof(int));
    
            var codeBatCutParameter = codeBatCut.HasValue ?
                new ObjectParameter("CodeBatCut", codeBatCut) :
                new ObjectParameter("CodeBatCut", typeof(int));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(int));
    
            var overspeedParameter = overspeed.HasValue ?
                new ObjectParameter("Overspeed", overspeed) :
                new ObjectParameter("Overspeed", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanCitraUpdatePosition_old1", deviceIdParameter, objectRegNumParameter, simcardParameter, gpsTimeParameter, lastDataTimeParameter, speedParameter, directParameter, lonParameter, latParameter, gpsFlagParameter, odoParameter, codeAccParameter, codeSensorParameter, codeSosParameter, codeEngineStopParameter, codeBatCutParameter, fuelParameter, overspeedParameter, result);
        }
    
        public virtual int spDyanCitraUpdatePositionHarsh(string deviceId, Nullable<System.DateTime> gpsTime, Nullable<System.DateTime> lastDataTime, Nullable<short> speed, Nullable<short> direct, Nullable<double> lon, Nullable<double> lat, Nullable<short> gpsFlag, string type, Nullable<double> fuel, ObjectParameter result)
        {
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanCitraUpdatePositionHarsh", deviceIdParameter, gpsTimeParameter, lastDataTimeParameter, speedParameter, directParameter, lonParameter, latParameter, gpsFlagParameter, typeParameter, fuelParameter, result);
        }
    
        public virtual int spDyanCitraUpdatePositionHarsh_old1(string deviceId, Nullable<System.DateTime> gpsTime, Nullable<System.DateTime> lastDataTime, Nullable<short> speed, Nullable<short> direct, Nullable<double> lon, Nullable<double> lat, Nullable<short> gpsFlag, string type, ObjectParameter result)
        {
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanCitraUpdatePositionHarsh_old1", deviceIdParameter, gpsTimeParameter, lastDataTimeParameter, speedParameter, directParameter, lonParameter, latParameter, gpsFlagParameter, typeParameter, result);
        }
    
        public virtual int spDyanCitraUpdatePositionNew(string deviceId, string objectRegNum, string simcard, Nullable<System.DateTime> gpsTime, Nullable<System.DateTime> lastDataTime, Nullable<short> speed, Nullable<short> direct, Nullable<double> lon, Nullable<double> lat, Nullable<short> gpsFlag, Nullable<long> odo, Nullable<int> codeAcc, Nullable<int> codeSensor, Nullable<int> codeSos, Nullable<int> codeEngineStop, Nullable<int> fuel, Nullable<int> overspeed, ObjectParameter result)
        {
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var simcardParameter = simcard != null ?
                new ObjectParameter("Simcard", simcard) :
                new ObjectParameter("Simcard", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var odoParameter = odo.HasValue ?
                new ObjectParameter("Odo", odo) :
                new ObjectParameter("Odo", typeof(long));
    
            var codeAccParameter = codeAcc.HasValue ?
                new ObjectParameter("CodeAcc", codeAcc) :
                new ObjectParameter("CodeAcc", typeof(int));
    
            var codeSensorParameter = codeSensor.HasValue ?
                new ObjectParameter("CodeSensor", codeSensor) :
                new ObjectParameter("CodeSensor", typeof(int));
    
            var codeSosParameter = codeSos.HasValue ?
                new ObjectParameter("CodeSos", codeSos) :
                new ObjectParameter("CodeSos", typeof(int));
    
            var codeEngineStopParameter = codeEngineStop.HasValue ?
                new ObjectParameter("CodeEngineStop", codeEngineStop) :
                new ObjectParameter("CodeEngineStop", typeof(int));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(int));
    
            var overspeedParameter = overspeed.HasValue ?
                new ObjectParameter("Overspeed", overspeed) :
                new ObjectParameter("Overspeed", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanCitraUpdatePositionNew", deviceIdParameter, objectRegNumParameter, simcardParameter, gpsTimeParameter, lastDataTimeParameter, speedParameter, directParameter, lonParameter, latParameter, gpsFlagParameter, odoParameter, codeAccParameter, codeSensorParameter, codeSosParameter, codeEngineStopParameter, fuelParameter, overspeedParameter, result);
        }
    
        public virtual ObjectResult<spDyanDelprophilGetVehicle_Result> spDyanDelprophilGetVehicle()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDyanDelprophilGetVehicle_Result>("spDyanDelprophilGetVehicle");
        }
    
        public virtual ObjectResult<spDyanGetActiveGps_Result> spDyanGetActiveGps(Nullable<System.DateTime> dataTime)
        {
            var dataTimeParameter = dataTime.HasValue ?
                new ObjectParameter("DataTime", dataTime) :
                new ObjectParameter("DataTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDyanGetActiveGps_Result>("spDyanGetActiveGps", dataTimeParameter);
        }
    
        public virtual int spDyanGetActiveUsage(string objectId, Nullable<System.DateTime> processTime)
        {
            var objectIdParameter = objectId != null ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(string));
    
            var processTimeParameter = processTime.HasValue ?
                new ObjectParameter("ProcessTime", processTime) :
                new ObjectParameter("ProcessTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanGetActiveUsage", objectIdParameter, processTimeParameter);
        }
    
        public virtual int spDyanGetActiveUsage_OLD_20191029(string objectId, Nullable<System.DateTime> processTime)
        {
            var objectIdParameter = objectId != null ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(string));
    
            var processTimeParameter = processTime.HasValue ?
                new ObjectParameter("ProcessTime", processTime) :
                new ObjectParameter("ProcessTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanGetActiveUsage_OLD_20191029", objectIdParameter, processTimeParameter);
        }
    
        public virtual int spDyanGetActiveUsage_Test(string objectId, Nullable<System.DateTime> processTime)
        {
            var objectIdParameter = objectId != null ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(string));
    
            var processTimeParameter = processTime.HasValue ?
                new ObjectParameter("ProcessTime", processTime) :
                new ObjectParameter("ProcessTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanGetActiveUsage_Test", objectIdParameter, processTimeParameter);
        }
    
        public virtual int spDyanGetATrack(string sDate)
        {
            var sDateParameter = sDate != null ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanGetATrack", sDateParameter);
        }
    
        public virtual ObjectResult<spDyanGetEventHourly_Result> spDyanGetEventHourly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDyanGetEventHourly_Result>("spDyanGetEventHourly");
        }
    
        public virtual ObjectResult<spDyanGetGeoEventHourly_Result> spDyanGetGeoEventHourly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDyanGetGeoEventHourly_Result>("spDyanGetGeoEventHourly");
        }
    
        public virtual ObjectResult<spDyanGetTracksHourly_Result> spDyanGetTracksHourly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDyanGetTracksHourly_Result>("spDyanGetTracksHourly");
        }
    
        public virtual int spDyanMoveHist(string vhcId, string vname, string gsmNum, Nullable<System.DateTime> gpsTime, Nullable<decimal> lon, Nullable<decimal> lat, Nullable<int> speed, Nullable<int> direct, string mDTStatus, string statusDes, Nullable<int> mileage, Nullable<int> exhaust)
        {
            var vhcIdParameter = vhcId != null ?
                new ObjectParameter("VhcId", vhcId) :
                new ObjectParameter("VhcId", typeof(string));
    
            var vnameParameter = vname != null ?
                new ObjectParameter("Vname", vname) :
                new ObjectParameter("Vname", typeof(string));
    
            var gsmNumParameter = gsmNum != null ?
                new ObjectParameter("GsmNum", gsmNum) :
                new ObjectParameter("GsmNum", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(decimal));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(decimal));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(int));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(int));
    
            var mDTStatusParameter = mDTStatus != null ?
                new ObjectParameter("MDTStatus", mDTStatus) :
                new ObjectParameter("MDTStatus", typeof(string));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var exhaustParameter = exhaust.HasValue ?
                new ObjectParameter("Exhaust", exhaust) :
                new ObjectParameter("Exhaust", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanMoveHist", vhcIdParameter, vnameParameter, gsmNumParameter, gpsTimeParameter, lonParameter, latParameter, speedParameter, directParameter, mDTStatusParameter, statusDesParameter, mileageParameter, exhaustParameter);
        }
    
        public virtual int spDyanUpdateActiveUsage(string objectID, string objectRegNum, Nullable<System.DateTime> gPSTime, Nullable<System.DateTime> processTime, Nullable<int> engineOn, Nullable<int> sensor1On, Nullable<int> sensor2On, ObjectParameter result)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var processTimeParameter = processTime.HasValue ?
                new ObjectParameter("ProcessTime", processTime) :
                new ObjectParameter("ProcessTime", typeof(System.DateTime));
    
            var engineOnParameter = engineOn.HasValue ?
                new ObjectParameter("EngineOn", engineOn) :
                new ObjectParameter("EngineOn", typeof(int));
    
            var sensor1OnParameter = sensor1On.HasValue ?
                new ObjectParameter("Sensor1On", sensor1On) :
                new ObjectParameter("Sensor1On", typeof(int));
    
            var sensor2OnParameter = sensor2On.HasValue ?
                new ObjectParameter("Sensor2On", sensor2On) :
                new ObjectParameter("Sensor2On", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanUpdateActiveUsage", objectIDParameter, objectRegNumParameter, gPSTimeParameter, processTimeParameter, engineOnParameter, sensor1OnParameter, sensor2OnParameter, result);
        }
    
        public virtual int spDyanUpdateDataAppSvrLite(string objectID, string objectRegNum, string simcard, Nullable<int> driverID, Nullable<System.DateTime> gPSTime, Nullable<double> lon, Nullable<double> lat, Nullable<short> speed, Nullable<short> direct, Nullable<byte> gPSFlag, string cur_Location, string mDTStatus, string operateStatus, Nullable<byte> transType, string statusDes, Nullable<System.DateTime> lastDataTime, Nullable<System.DateTime> lastSendTime, string lastSendCon, string lastDataCon, Nullable<bool> isActive, Nullable<byte> curTransType, Nullable<int> mileAge, Nullable<double> balance, Nullable<double> exhaust, Nullable<double> temperature, Nullable<double> smoke, Nullable<int> mark, string tagID, Nullable<double> mileage2, Nullable<double> temp2, ObjectParameter result)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var simcardParameter = simcard != null ?
                new ObjectParameter("Simcard", simcard) :
                new ObjectParameter("Simcard", typeof(string));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var cur_LocationParameter = cur_Location != null ?
                new ObjectParameter("Cur_Location", cur_Location) :
                new ObjectParameter("Cur_Location", typeof(string));
    
            var mDTStatusParameter = mDTStatus != null ?
                new ObjectParameter("MDTStatus", mDTStatus) :
                new ObjectParameter("MDTStatus", typeof(string));
    
            var operateStatusParameter = operateStatus != null ?
                new ObjectParameter("OperateStatus", operateStatus) :
                new ObjectParameter("OperateStatus", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(byte));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var lastSendTimeParameter = lastSendTime.HasValue ?
                new ObjectParameter("LastSendTime", lastSendTime) :
                new ObjectParameter("LastSendTime", typeof(System.DateTime));
    
            var lastSendConParameter = lastSendCon != null ?
                new ObjectParameter("LastSendCon", lastSendCon) :
                new ObjectParameter("LastSendCon", typeof(string));
    
            var lastDataConParameter = lastDataCon != null ?
                new ObjectParameter("LastDataCon", lastDataCon) :
                new ObjectParameter("LastDataCon", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var curTransTypeParameter = curTransType.HasValue ?
                new ObjectParameter("CurTransType", curTransType) :
                new ObjectParameter("CurTransType", typeof(byte));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("MileAge", mileAge) :
                new ObjectParameter("MileAge", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var exhaustParameter = exhaust.HasValue ?
                new ObjectParameter("Exhaust", exhaust) :
                new ObjectParameter("Exhaust", typeof(double));
    
            var temperatureParameter = temperature.HasValue ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(double));
    
            var smokeParameter = smoke.HasValue ?
                new ObjectParameter("Smoke", smoke) :
                new ObjectParameter("Smoke", typeof(double));
    
            var markParameter = mark.HasValue ?
                new ObjectParameter("Mark", mark) :
                new ObjectParameter("Mark", typeof(int));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(string));
    
            var mileage2Parameter = mileage2.HasValue ?
                new ObjectParameter("Mileage2", mileage2) :
                new ObjectParameter("Mileage2", typeof(double));
    
            var temp2Parameter = temp2.HasValue ?
                new ObjectParameter("Temp2", temp2) :
                new ObjectParameter("Temp2", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanUpdateDataAppSvrLite", objectIDParameter, objectRegNumParameter, simcardParameter, driverIDParameter, gPSTimeParameter, lonParameter, latParameter, speedParameter, directParameter, gPSFlagParameter, cur_LocationParameter, mDTStatusParameter, operateStatusParameter, transTypeParameter, statusDesParameter, lastDataTimeParameter, lastSendTimeParameter, lastSendConParameter, lastDataConParameter, isActiveParameter, curTransTypeParameter, mileAgeParameter, balanceParameter, exhaustParameter, temperatureParameter, smokeParameter, markParameter, tagIDParameter, mileage2Parameter, temp2Parameter, result);
        }
    
        public virtual int spDyanUpdateEventAppSvrLite(string gpsId, Nullable<short> eventType, Nullable<short> eventStatus, string statusDes, Nullable<System.DateTime> gpsTime, Nullable<int> mileage, Nullable<double> lon, Nullable<double> lat, Nullable<short> speed, Nullable<short> direct, Nullable<short> gpsFlag, Nullable<short> fuel)
        {
            var gpsIdParameter = gpsId != null ?
                new ObjectParameter("GpsId", gpsId) :
                new ObjectParameter("GpsId", typeof(string));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(short));
    
            var eventStatusParameter = eventStatus.HasValue ?
                new ObjectParameter("EventStatus", eventStatus) :
                new ObjectParameter("EventStatus", typeof(short));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanUpdateEventAppSvrLite", gpsIdParameter, eventTypeParameter, eventStatusParameter, statusDesParameter, gpsTimeParameter, mileageParameter, lonParameter, latParameter, speedParameter, directParameter, gpsFlagParameter, fuelParameter);
        }
    
        public virtual int spDyanUpdateGpsDataOto(string deviceId, string objectRegNum, Nullable<System.DateTime> gpsTime, Nullable<short> speed, Nullable<short> direct, Nullable<double> lon, Nullable<double> lat, Nullable<long> odo, string stsDes, string mdtSts, Nullable<int> fuel, ObjectParameter result)
        {
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var odoParameter = odo.HasValue ?
                new ObjectParameter("Odo", odo) :
                new ObjectParameter("Odo", typeof(long));
    
            var stsDesParameter = stsDes != null ?
                new ObjectParameter("StsDes", stsDes) :
                new ObjectParameter("StsDes", typeof(string));
    
            var mdtStsParameter = mdtSts != null ?
                new ObjectParameter("MdtSts", mdtSts) :
                new ObjectParameter("MdtSts", typeof(string));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanUpdateGpsDataOto", deviceIdParameter, objectRegNumParameter, gpsTimeParameter, speedParameter, directParameter, lonParameter, latParameter, odoParameter, stsDesParameter, mdtStsParameter, fuelParameter, result);
        }
    
        public virtual int spDyanUpdEventOto(string gpsId, Nullable<short> eventType, Nullable<short> eventStatus, string statusDes, Nullable<System.DateTime> gpsTime, Nullable<int> mileage, Nullable<double> lon, Nullable<double> lat, Nullable<short> speed, Nullable<short> direct, Nullable<short> gpsFlag, Nullable<short> fuel)
        {
            var gpsIdParameter = gpsId != null ?
                new ObjectParameter("GpsId", gpsId) :
                new ObjectParameter("GpsId", typeof(string));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(short));
    
            var eventStatusParameter = eventStatus.HasValue ?
                new ObjectParameter("EventStatus", eventStatus) :
                new ObjectParameter("EventStatus", typeof(short));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var gpsTimeParameter = gpsTime.HasValue ?
                new ObjectParameter("GpsTime", gpsTime) :
                new ObjectParameter("GpsTime", typeof(System.DateTime));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(short));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gpsFlagParameter = gpsFlag.HasValue ?
                new ObjectParameter("GpsFlag", gpsFlag) :
                new ObjectParameter("GpsFlag", typeof(short));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDyanUpdEventOto", gpsIdParameter, eventTypeParameter, eventStatusParameter, statusDesParameter, gpsTimeParameter, mileageParameter, lonParameter, latParameter, speedParameter, directParameter, gpsFlagParameter, fuelParameter);
        }
    
        public virtual ObjectResult<spGetAllRoadIDAndRoadName_Result> spGetAllRoadIDAndRoadName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllRoadIDAndRoadName_Result>("spGetAllRoadIDAndRoadName");
        }
    
        public virtual ObjectResult<spGetAllUserFee_Result> spGetAllUserFee(Nullable<int> feeType, string transType, string recvStartTime, string recvEndTime, string sendStartTime, string sendEndTime)
        {
            var feeTypeParameter = feeType.HasValue ?
                new ObjectParameter("FeeType", feeType) :
                new ObjectParameter("FeeType", typeof(int));
    
            var transTypeParameter = transType != null ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(string));
    
            var recvStartTimeParameter = recvStartTime != null ?
                new ObjectParameter("RecvStartTime", recvStartTime) :
                new ObjectParameter("RecvStartTime", typeof(string));
    
            var recvEndTimeParameter = recvEndTime != null ?
                new ObjectParameter("RecvEndTime", recvEndTime) :
                new ObjectParameter("RecvEndTime", typeof(string));
    
            var sendStartTimeParameter = sendStartTime != null ?
                new ObjectParameter("SendStartTime", sendStartTime) :
                new ObjectParameter("SendStartTime", typeof(string));
    
            var sendEndTimeParameter = sendEndTime != null ?
                new ObjectParameter("SendEndTime", sendEndTime) :
                new ObjectParameter("SendEndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUserFee_Result>("spGetAllUserFee", feeTypeParameter, transTypeParameter, recvStartTimeParameter, recvEndTimeParameter, sendStartTimeParameter, sendEndTimeParameter);
        }
    
        public virtual ObjectResult<string> spGetCarInfoByRegNum(string vehicleRegNum)
        {
            var vehicleRegNumParameter = vehicleRegNum != null ?
                new ObjectParameter("VehicleRegNum", vehicleRegNum) :
                new ObjectParameter("VehicleRegNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetCarInfoByRegNum", vehicleRegNumParameter);
        }
    
        public virtual int spGetCounter(string groupCode)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCounter", groupCodeParameter);
        }
    
        public virtual int spGetCounter2(string groupCode, Nullable<int> userID)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCounter2", groupCodeParameter, userIDParameter);
        }
    
        public virtual int spGetCounterByUserID(string groupCode)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCounterByUserID", groupCodeParameter);
        }
    
        public virtual int spGetCounterByUserID2(string groupCode)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCounterByUserID2", groupCodeParameter);
        }
    
        public virtual int spGetCounterDetail(string groupCode, Nullable<int> counterIndex)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var counterIndexParameter = counterIndex.HasValue ?
                new ObjectParameter("CounterIndex", counterIndex) :
                new ObjectParameter("CounterIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCounterDetail", groupCodeParameter, counterIndexParameter);
        }
    
        public virtual int spGetCounterDetailByUserID(string groupCode, Nullable<int> counterIndex)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var counterIndexParameter = counterIndex.HasValue ?
                new ObjectParameter("CounterIndex", counterIndex) :
                new ObjectParameter("CounterIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCounterDetailByUserID", groupCodeParameter, counterIndexParameter);
        }
    
        public virtual int spGetFuelReport(string groupCode, string objectID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetFuelReport", groupCodeParameter, objectIDParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<spGetHistoryGPSData_Result> spGetHistoryGPSData(string objectID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHistoryGPSData_Result>("spGetHistoryGPSData", objectIDParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual int spGetMaxSpeedReport(string groupCode, string objectID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetMaxSpeedReport", groupCodeParameter, objectIDParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual int spGetMonthlyEstFuelReport(string groupCode, Nullable<int> year, Nullable<int> month)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetMonthlyEstFuelReport", groupCodeParameter, yearParameter, monthParameter);
        }
    
        public virtual int spGetMonthlyFuelReport(string groupCode, Nullable<int> year, Nullable<int> month)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetMonthlyFuelReport", groupCodeParameter, yearParameter, monthParameter);
        }
    
        public virtual int spGetMonthlyMaxSpeedReport(string groupCode, Nullable<int> year, Nullable<int> month)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetMonthlyMaxSpeedReport", groupCodeParameter, yearParameter, monthParameter);
        }
    
        public virtual int spGetMonthlyOdoReport(string groupCode, Nullable<int> year, Nullable<int> month)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetMonthlyOdoReport", groupCodeParameter, yearParameter, monthParameter);
        }
    
        public virtual int spGetOdoReport(string groupCode, string objectID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetOdoReport", groupCodeParameter, objectIDParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<spGetOneUserFee_Result> spGetOneUserFee(Nullable<byte> feeType, string sIMNumber, string transType, string recvStartTime, string recvEndTime, string sendStartTime, string sendEndTime)
        {
            var feeTypeParameter = feeType.HasValue ?
                new ObjectParameter("FeeType", feeType) :
                new ObjectParameter("FeeType", typeof(byte));
    
            var sIMNumberParameter = sIMNumber != null ?
                new ObjectParameter("SIMNumber", sIMNumber) :
                new ObjectParameter("SIMNumber", typeof(string));
    
            var transTypeParameter = transType != null ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(string));
    
            var recvStartTimeParameter = recvStartTime != null ?
                new ObjectParameter("RecvStartTime", recvStartTime) :
                new ObjectParameter("RecvStartTime", typeof(string));
    
            var recvEndTimeParameter = recvEndTime != null ?
                new ObjectParameter("RecvEndTime", recvEndTime) :
                new ObjectParameter("RecvEndTime", typeof(string));
    
            var sendStartTimeParameter = sendStartTime != null ?
                new ObjectParameter("SendStartTime", sendStartTime) :
                new ObjectParameter("SendStartTime", typeof(string));
    
            var sendEndTimeParameter = sendEndTime != null ?
                new ObjectParameter("SendEndTime", sendEndTime) :
                new ObjectParameter("SendEndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOneUserFee_Result>("spGetOneUserFee", feeTypeParameter, sIMNumberParameter, transTypeParameter, recvStartTimeParameter, recvEndTimeParameter, sendStartTimeParameter, sendEndTimeParameter);
        }
    
        public virtual int spGetRegisterNo(ObjectParameter registerNo)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetRegisterNo", registerNo);
        }
    
        public virtual ObjectResult<spGetRoadData_Result> spGetRoadData(string strRoadID)
        {
            var strRoadIDParameter = strRoadID != null ?
                new ObjectParameter("strRoadID", strRoadID) :
                new ObjectParameter("strRoadID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRoadData_Result>("spGetRoadData", strRoadIDParameter);
        }
    
        public virtual ObjectResult<spGetRoadHistoryDataByVehicleSIMAndTime_Result> spGetRoadHistoryDataByVehicleSIMAndTime(string vehicleSIM, Nullable<System.DateTime> sTime, Nullable<System.DateTime> eTime)
        {
            var vehicleSIMParameter = vehicleSIM != null ?
                new ObjectParameter("VehicleSIM", vehicleSIM) :
                new ObjectParameter("VehicleSIM", typeof(string));
    
            var sTimeParameter = sTime.HasValue ?
                new ObjectParameter("STime", sTime) :
                new ObjectParameter("STime", typeof(System.DateTime));
    
            var eTimeParameter = eTime.HasValue ?
                new ObjectParameter("ETime", eTime) :
                new ObjectParameter("ETime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRoadHistoryDataByVehicleSIMAndTime_Result>("spGetRoadHistoryDataByVehicleSIMAndTime", vehicleSIMParameter, sTimeParameter, eTimeParameter);
        }
    
        public virtual ObjectResult<spGetRoadIDAndRoadNamebyVehicleNo_Result> spGetRoadIDAndRoadNamebyVehicleNo(string vehicleNo)
        {
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRoadIDAndRoadNamebyVehicleNo_Result>("spGetRoadIDAndRoadNamebyVehicleNo", vehicleNoParameter);
        }
    
        public virtual ObjectResult<spGetRoadPlanTime_Result> spGetRoadPlanTime(string roadID, string vehicleNo, Nullable<System.DateTime> sTime, Nullable<System.DateTime> eTime)
        {
            var roadIDParameter = roadID != null ?
                new ObjectParameter("RoadID", roadID) :
                new ObjectParameter("RoadID", typeof(string));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var sTimeParameter = sTime.HasValue ?
                new ObjectParameter("STime", sTime) :
                new ObjectParameter("STime", typeof(System.DateTime));
    
            var eTimeParameter = eTime.HasValue ?
                new ObjectParameter("ETime", eTime) :
                new ObjectParameter("ETime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRoadPlanTime_Result>("spGetRoadPlanTime", roadIDParameter, vehicleNoParameter, sTimeParameter, eTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetRoadStationMaxID(string strRoadID)
        {
            var strRoadIDParameter = strRoadID != null ?
                new ObjectParameter("strRoadID", strRoadID) :
                new ObjectParameter("strRoadID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetRoadStationMaxID", strRoadIDParameter);
        }
    
        public virtual ObjectResult<spGetRoadStationTracksByVehicleNoAndTime_Result> spGetRoadStationTracksByVehicleNoAndTime(string vehicleNo, Nullable<System.DateTime> sTime, Nullable<System.DateTime> eTime)
        {
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var sTimeParameter = sTime.HasValue ?
                new ObjectParameter("STime", sTime) :
                new ObjectParameter("STime", typeof(System.DateTime));
    
            var eTimeParameter = eTime.HasValue ?
                new ObjectParameter("ETime", eTime) :
                new ObjectParameter("ETime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRoadStationTracksByVehicleNoAndTime_Result>("spGetRoadStationTracksByVehicleNoAndTime", vehicleNoParameter, sTimeParameter, eTimeParameter);
        }
    
        public virtual int spGetTripReport(string groupCode, string objectID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetTripReport", groupCodeParameter, objectIDParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<SpGetVehicleByRoadID_Result> SpGetVehicleByRoadID(string roadID)
        {
            var roadIDParameter = roadID != null ?
                new ObjectParameter("RoadID", roadID) :
                new ObjectParameter("RoadID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetVehicleByRoadID_Result>("SpGetVehicleByRoadID", roadIDParameter);
        }
    
        public virtual int spGetVehicleDistance(string groupCode, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetVehicleDistance", groupCodeParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<spGetVehiclePlanTimeByVehicleNoAndTime_Result> spGetVehiclePlanTimeByVehicleNoAndTime(string vehicleNo, Nullable<System.DateTime> sTime, Nullable<System.DateTime> eTime)
        {
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var sTimeParameter = sTime.HasValue ?
                new ObjectParameter("STime", sTime) :
                new ObjectParameter("STime", typeof(System.DateTime));
    
            var eTimeParameter = eTime.HasValue ?
                new ObjectParameter("ETime", eTime) :
                new ObjectParameter("ETime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetVehiclePlanTimeByVehicleNoAndTime_Result>("spGetVehiclePlanTimeByVehicleNoAndTime", vehicleNoParameter, sTimeParameter, eTimeParameter);
        }
    
        public virtual ObjectResult<spGetVehicleRoadPlanInfoByVehicleNoAndTTime_Result> spGetVehicleRoadPlanInfoByVehicleNoAndTTime(string vehicleNo, Nullable<System.DateTime> sTime, Nullable<System.DateTime> eTime)
        {
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var sTimeParameter = sTime.HasValue ?
                new ObjectParameter("STime", sTime) :
                new ObjectParameter("STime", typeof(System.DateTime));
    
            var eTimeParameter = eTime.HasValue ?
                new ObjectParameter("ETime", eTime) :
                new ObjectParameter("ETime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetVehicleRoadPlanInfoByVehicleNoAndTTime_Result>("spGetVehicleRoadPlanInfoByVehicleNoAndTTime", vehicleNoParameter, sTimeParameter, eTimeParameter);
        }
    
        public virtual int spGetVehicleUtili(string groupCode, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetVehicleUtili", groupCodeParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual int spHseLastCounterAPI(string pObjectId, Nullable<System.DateTime> pGpsTime)
        {
            var pObjectIdParameter = pObjectId != null ?
                new ObjectParameter("pObjectId", pObjectId) :
                new ObjectParameter("pObjectId", typeof(string));
    
            var pGpsTimeParameter = pGpsTime.HasValue ?
                new ObjectParameter("pGpsTime", pGpsTime) :
                new ObjectParameter("pGpsTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spHseLastCounterAPI", pObjectIdParameter, pGpsTimeParameter);
        }
    
        public virtual int spInsertAlarm(string objectID, Nullable<System.DateTime> gPSTime, Nullable<System.DateTime> receiveTime, string alarmType, Nullable<double> lon, Nullable<double> lat, Nullable<double> speed, Nullable<short> direct, string cur_location, string statusDes, string remark, string createuser, ObjectParameter alarmID)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var receiveTimeParameter = receiveTime.HasValue ?
                new ObjectParameter("ReceiveTime", receiveTime) :
                new ObjectParameter("ReceiveTime", typeof(System.DateTime));
    
            var alarmTypeParameter = alarmType != null ?
                new ObjectParameter("AlarmType", alarmType) :
                new ObjectParameter("AlarmType", typeof(string));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("lon", lon) :
                new ObjectParameter("lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("lat", lat) :
                new ObjectParameter("lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("speed", speed) :
                new ObjectParameter("speed", typeof(double));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("direct", direct) :
                new ObjectParameter("direct", typeof(short));
    
            var cur_locationParameter = cur_location != null ?
                new ObjectParameter("Cur_location", cur_location) :
                new ObjectParameter("Cur_location", typeof(string));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var createuserParameter = createuser != null ?
                new ObjectParameter("Createuser", createuser) :
                new ObjectParameter("Createuser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertAlarm", objectIDParameter, gPSTimeParameter, receiveTimeParameter, alarmTypeParameter, lonParameter, latParameter, speedParameter, directParameter, cur_locationParameter, statusDesParameter, remarkParameter, createuserParameter, alarmID);
        }
    
        public virtual int spInsertCustomerInput(string registerNo, string objectID, string sUECONTENT, string sUEDATE, string sUENAMETYPE, string sUEMAN, string sUETEL, string sUEADDRESS, string sUEEMAIL, string sUEREMARK, string uSERNAME)
        {
            var registerNoParameter = registerNo != null ?
                new ObjectParameter("RegisterNo", registerNo) :
                new ObjectParameter("RegisterNo", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var sUECONTENTParameter = sUECONTENT != null ?
                new ObjectParameter("SUECONTENT", sUECONTENT) :
                new ObjectParameter("SUECONTENT", typeof(string));
    
            var sUEDATEParameter = sUEDATE != null ?
                new ObjectParameter("SUEDATE", sUEDATE) :
                new ObjectParameter("SUEDATE", typeof(string));
    
            var sUENAMETYPEParameter = sUENAMETYPE != null ?
                new ObjectParameter("SUENAMETYPE", sUENAMETYPE) :
                new ObjectParameter("SUENAMETYPE", typeof(string));
    
            var sUEMANParameter = sUEMAN != null ?
                new ObjectParameter("SUEMAN", sUEMAN) :
                new ObjectParameter("SUEMAN", typeof(string));
    
            var sUETELParameter = sUETEL != null ?
                new ObjectParameter("SUETEL", sUETEL) :
                new ObjectParameter("SUETEL", typeof(string));
    
            var sUEADDRESSParameter = sUEADDRESS != null ?
                new ObjectParameter("SUEADDRESS", sUEADDRESS) :
                new ObjectParameter("SUEADDRESS", typeof(string));
    
            var sUEEMAILParameter = sUEEMAIL != null ?
                new ObjectParameter("SUEEMAIL", sUEEMAIL) :
                new ObjectParameter("SUEEMAIL", typeof(string));
    
            var sUEREMARKParameter = sUEREMARK != null ?
                new ObjectParameter("SUEREMARK", sUEREMARK) :
                new ObjectParameter("SUEREMARK", typeof(string));
    
            var uSERNAMEParameter = uSERNAME != null ?
                new ObjectParameter("USERNAME", uSERNAME) :
                new ObjectParameter("USERNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertCustomerInput", registerNoParameter, objectIDParameter, sUECONTENTParameter, sUEDATEParameter, sUENAMETYPEParameter, sUEMANParameter, sUETELParameter, sUEADDRESSParameter, sUEEMAILParameter, sUEREMARKParameter, uSERNAMEParameter);
        }
    
        public virtual int spInsertEvent(string objectID, Nullable<int> eventType, Nullable<int> eventStatus, Nullable<System.DateTime> eventTime, Nullable<System.DateTime> gPSTime, Nullable<int> mileAge, Nullable<double> lon, Nullable<double> lat, Nullable<double> speed, Nullable<short> direct, Nullable<byte> gPSFlag, string statusDes)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var eventTypeParameter = eventType.HasValue ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(int));
    
            var eventStatusParameter = eventStatus.HasValue ?
                new ObjectParameter("EventStatus", eventStatus) :
                new ObjectParameter("EventStatus", typeof(int));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("mileAge", mileAge) :
                new ObjectParameter("mileAge", typeof(int));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(double));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertEvent", objectIDParameter, eventTypeParameter, eventStatusParameter, eventTimeParameter, gPSTimeParameter, mileAgeParameter, lonParameter, latParameter, speedParameter, directParameter, gPSFlagParameter, statusDesParameter);
        }
    
        public virtual int spInsertRoadDataReport(string vehicleSIM, string vehicleNo, Nullable<System.DateTime> gPSTime, Nullable<double> lon, Nullable<double> lat, Nullable<int> speed, string dir, string status)
        {
            var vehicleSIMParameter = vehicleSIM != null ?
                new ObjectParameter("VehicleSIM", vehicleSIM) :
                new ObjectParameter("VehicleSIM", typeof(string));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(int));
    
            var dirParameter = dir != null ?
                new ObjectParameter("Dir", dir) :
                new ObjectParameter("Dir", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertRoadDataReport", vehicleSIMParameter, vehicleNoParameter, gPSTimeParameter, lonParameter, latParameter, speedParameter, dirParameter, statusParameter);
        }
    
        public virtual int spInsertRoadPointTracks(string vehicleID, string vehicleNo, string vehicleSIM, Nullable<System.DateTime> gPSTime, Nullable<System.DateTime> arvTime, Nullable<double> lon, Nullable<double> lat, Nullable<int> roadPointID, Nullable<int> roadType, Nullable<int> roadSpeed, string timeCtrl, Nullable<int> length, string status)
        {
            var vehicleIDParameter = vehicleID != null ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(string));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var vehicleSIMParameter = vehicleSIM != null ?
                new ObjectParameter("VehicleSIM", vehicleSIM) :
                new ObjectParameter("VehicleSIM", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var arvTimeParameter = arvTime.HasValue ?
                new ObjectParameter("ArvTime", arvTime) :
                new ObjectParameter("ArvTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var roadPointIDParameter = roadPointID.HasValue ?
                new ObjectParameter("RoadPointID", roadPointID) :
                new ObjectParameter("RoadPointID", typeof(int));
    
            var roadTypeParameter = roadType.HasValue ?
                new ObjectParameter("RoadType", roadType) :
                new ObjectParameter("RoadType", typeof(int));
    
            var roadSpeedParameter = roadSpeed.HasValue ?
                new ObjectParameter("RoadSpeed", roadSpeed) :
                new ObjectParameter("RoadSpeed", typeof(int));
    
            var timeCtrlParameter = timeCtrl != null ?
                new ObjectParameter("TimeCtrl", timeCtrl) :
                new ObjectParameter("TimeCtrl", typeof(string));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertRoadPointTracks", vehicleIDParameter, vehicleNoParameter, vehicleSIMParameter, gPSTimeParameter, arvTimeParameter, lonParameter, latParameter, roadPointIDParameter, roadTypeParameter, roadSpeedParameter, timeCtrlParameter, lengthParameter, statusParameter);
        }
    
        public virtual int spInsertRoadStationReport(string vehicleNo, Nullable<int> s_StationID, string s_StationName, string s_STime, string s_RSTime, Nullable<int> e_StationID, string e_StationName, string e_ETime, string e_RETime, string status)
        {
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var s_StationIDParameter = s_StationID.HasValue ?
                new ObjectParameter("S_StationID", s_StationID) :
                new ObjectParameter("S_StationID", typeof(int));
    
            var s_StationNameParameter = s_StationName != null ?
                new ObjectParameter("S_StationName", s_StationName) :
                new ObjectParameter("S_StationName", typeof(string));
    
            var s_STimeParameter = s_STime != null ?
                new ObjectParameter("S_STime", s_STime) :
                new ObjectParameter("S_STime", typeof(string));
    
            var s_RSTimeParameter = s_RSTime != null ?
                new ObjectParameter("S_RSTime", s_RSTime) :
                new ObjectParameter("S_RSTime", typeof(string));
    
            var e_StationIDParameter = e_StationID.HasValue ?
                new ObjectParameter("E_StationID", e_StationID) :
                new ObjectParameter("E_StationID", typeof(int));
    
            var e_StationNameParameter = e_StationName != null ?
                new ObjectParameter("E_StationName", e_StationName) :
                new ObjectParameter("E_StationName", typeof(string));
    
            var e_ETimeParameter = e_ETime != null ?
                new ObjectParameter("E_ETime", e_ETime) :
                new ObjectParameter("E_ETime", typeof(string));
    
            var e_RETimeParameter = e_RETime != null ?
                new ObjectParameter("E_RETime", e_RETime) :
                new ObjectParameter("E_RETime", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertRoadStationReport", vehicleNoParameter, s_StationIDParameter, s_StationNameParameter, s_STimeParameter, s_RSTimeParameter, e_StationIDParameter, e_StationNameParameter, e_ETimeParameter, e_RETimeParameter, statusParameter);
        }
    
        public virtual int spInsertRoadStationTracks(Nullable<int> timeLimit, string vehicleID, string vehicleNO, string vehicleSIM, string curRoadID, Nullable<int> stationNo, string stationType, Nullable<System.DateTime> arvTime, Nullable<System.DateTime> gPSTime, Nullable<double> lon, Nullable<double> lat, Nullable<int> speed, Nullable<int> direction, Nullable<int> length, string status, Nullable<int> mileage)
        {
            var timeLimitParameter = timeLimit.HasValue ?
                new ObjectParameter("TimeLimit", timeLimit) :
                new ObjectParameter("TimeLimit", typeof(int));
    
            var vehicleIDParameter = vehicleID != null ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(string));
    
            var vehicleNOParameter = vehicleNO != null ?
                new ObjectParameter("VehicleNO", vehicleNO) :
                new ObjectParameter("VehicleNO", typeof(string));
    
            var vehicleSIMParameter = vehicleSIM != null ?
                new ObjectParameter("VehicleSIM", vehicleSIM) :
                new ObjectParameter("VehicleSIM", typeof(string));
    
            var curRoadIDParameter = curRoadID != null ?
                new ObjectParameter("CurRoadID", curRoadID) :
                new ObjectParameter("CurRoadID", typeof(string));
    
            var stationNoParameter = stationNo.HasValue ?
                new ObjectParameter("StationNo", stationNo) :
                new ObjectParameter("StationNo", typeof(int));
    
            var stationTypeParameter = stationType != null ?
                new ObjectParameter("StationType", stationType) :
                new ObjectParameter("StationType", typeof(string));
    
            var arvTimeParameter = arvTime.HasValue ?
                new ObjectParameter("ArvTime", arvTime) :
                new ObjectParameter("ArvTime", typeof(System.DateTime));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(int));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertRoadStationTracks", timeLimitParameter, vehicleIDParameter, vehicleNOParameter, vehicleSIMParameter, curRoadIDParameter, stationNoParameter, stationTypeParameter, arvTimeParameter, gPSTimeParameter, lonParameter, latParameter, speedParameter, directionParameter, lengthParameter, statusParameter, mileageParameter);
        }
    
        public virtual int spInsertRxTx(string sender, string receiver, Nullable<int> commandType, string userID, Nullable<System.DateTime> sendTime, Nullable<System.DateTime> rcvTime, string content, Nullable<byte> transType, Nullable<byte> sendSource)
        {
            var senderParameter = sender != null ?
                new ObjectParameter("Sender", sender) :
                new ObjectParameter("Sender", typeof(string));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var commandTypeParameter = commandType.HasValue ?
                new ObjectParameter("CommandType", commandType) :
                new ObjectParameter("CommandType", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var sendTimeParameter = sendTime.HasValue ?
                new ObjectParameter("SendTime", sendTime) :
                new ObjectParameter("SendTime", typeof(System.DateTime));
    
            var rcvTimeParameter = rcvTime.HasValue ?
                new ObjectParameter("RcvTime", rcvTime) :
                new ObjectParameter("RcvTime", typeof(System.DateTime));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(byte));
    
            var sendSourceParameter = sendSource.HasValue ?
                new ObjectParameter("SendSource", sendSource) :
                new ObjectParameter("SendSource", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertRxTx", senderParameter, receiverParameter, commandTypeParameter, userIDParameter, sendTimeParameter, rcvTimeParameter, contentParameter, transTypeParameter, sendSourceParameter);
        }
    
        public virtual int spInsertTaxiFee(string objectID, Nullable<System.DateTime> s_DateTime, Nullable<System.DateTime> e_DateTime, Nullable<double> price, Nullable<int> w_Time, Nullable<double> r_Km, Nullable<double> p_Km, Nullable<double> total_Money, Nullable<double> sLon, Nullable<double> sLat, Nullable<double> eLon, Nullable<double> eLat, string iCCardID, string businessID, Nullable<int> cheatNum, string carStatus, string con, string remark, string createUser)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var s_DateTimeParameter = s_DateTime.HasValue ?
                new ObjectParameter("S_DateTime", s_DateTime) :
                new ObjectParameter("S_DateTime", typeof(System.DateTime));
    
            var e_DateTimeParameter = e_DateTime.HasValue ?
                new ObjectParameter("E_DateTime", e_DateTime) :
                new ObjectParameter("E_DateTime", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var w_TimeParameter = w_Time.HasValue ?
                new ObjectParameter("W_Time", w_Time) :
                new ObjectParameter("W_Time", typeof(int));
    
            var r_KmParameter = r_Km.HasValue ?
                new ObjectParameter("R_Km", r_Km) :
                new ObjectParameter("R_Km", typeof(double));
    
            var p_KmParameter = p_Km.HasValue ?
                new ObjectParameter("P_Km", p_Km) :
                new ObjectParameter("P_Km", typeof(double));
    
            var total_MoneyParameter = total_Money.HasValue ?
                new ObjectParameter("Total_Money", total_Money) :
                new ObjectParameter("Total_Money", typeof(double));
    
            var sLonParameter = sLon.HasValue ?
                new ObjectParameter("sLon", sLon) :
                new ObjectParameter("sLon", typeof(double));
    
            var sLatParameter = sLat.HasValue ?
                new ObjectParameter("sLat", sLat) :
                new ObjectParameter("sLat", typeof(double));
    
            var eLonParameter = eLon.HasValue ?
                new ObjectParameter("eLon", eLon) :
                new ObjectParameter("eLon", typeof(double));
    
            var eLatParameter = eLat.HasValue ?
                new ObjectParameter("eLat", eLat) :
                new ObjectParameter("eLat", typeof(double));
    
            var iCCardIDParameter = iCCardID != null ?
                new ObjectParameter("ICCardID", iCCardID) :
                new ObjectParameter("ICCardID", typeof(string));
    
            var businessIDParameter = businessID != null ?
                new ObjectParameter("businessID", businessID) :
                new ObjectParameter("businessID", typeof(string));
    
            var cheatNumParameter = cheatNum.HasValue ?
                new ObjectParameter("cheatNum", cheatNum) :
                new ObjectParameter("cheatNum", typeof(int));
    
            var carStatusParameter = carStatus != null ?
                new ObjectParameter("CarStatus", carStatus) :
                new ObjectParameter("CarStatus", typeof(string));
    
            var conParameter = con != null ?
                new ObjectParameter("Con", con) :
                new ObjectParameter("Con", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var createUserParameter = createUser != null ?
                new ObjectParameter("CreateUser", createUser) :
                new ObjectParameter("CreateUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertTaxiFee", objectIDParameter, s_DateTimeParameter, e_DateTimeParameter, priceParameter, w_TimeParameter, r_KmParameter, p_KmParameter, total_MoneyParameter, sLonParameter, sLatParameter, eLonParameter, eLatParameter, iCCardIDParameter, businessIDParameter, cheatNumParameter, carStatusParameter, conParameter, remarkParameter, createUserParameter);
        }
    
        public virtual int spInsertTaxiInfo_Day(string objectID, string customerID, string objectType, Nullable<System.DateTime> gPSTime, Nullable<System.DateTime> arvTime, Nullable<System.DateTime> s_Date, Nullable<int> s_Year, Nullable<int> s_Month, Nullable<int> s_Day, Nullable<double> r_Total, Nullable<double> mileage_Total, Nullable<int> w_Total, Nullable<int> times_Total, Nullable<double> money_Total, string con)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var arvTimeParameter = arvTime.HasValue ?
                new ObjectParameter("ArvTime", arvTime) :
                new ObjectParameter("ArvTime", typeof(System.DateTime));
    
            var s_DateParameter = s_Date.HasValue ?
                new ObjectParameter("S_Date", s_Date) :
                new ObjectParameter("S_Date", typeof(System.DateTime));
    
            var s_YearParameter = s_Year.HasValue ?
                new ObjectParameter("S_Year", s_Year) :
                new ObjectParameter("S_Year", typeof(int));
    
            var s_MonthParameter = s_Month.HasValue ?
                new ObjectParameter("S_Month", s_Month) :
                new ObjectParameter("S_Month", typeof(int));
    
            var s_DayParameter = s_Day.HasValue ?
                new ObjectParameter("S_Day", s_Day) :
                new ObjectParameter("S_Day", typeof(int));
    
            var r_TotalParameter = r_Total.HasValue ?
                new ObjectParameter("R_Total", r_Total) :
                new ObjectParameter("R_Total", typeof(double));
    
            var mileage_TotalParameter = mileage_Total.HasValue ?
                new ObjectParameter("Mileage_Total", mileage_Total) :
                new ObjectParameter("Mileage_Total", typeof(double));
    
            var w_TotalParameter = w_Total.HasValue ?
                new ObjectParameter("W_Total", w_Total) :
                new ObjectParameter("W_Total", typeof(int));
    
            var times_TotalParameter = times_Total.HasValue ?
                new ObjectParameter("Times_Total", times_Total) :
                new ObjectParameter("Times_Total", typeof(int));
    
            var money_TotalParameter = money_Total.HasValue ?
                new ObjectParameter("Money_Total", money_Total) :
                new ObjectParameter("Money_Total", typeof(double));
    
            var conParameter = con != null ?
                new ObjectParameter("Con", con) :
                new ObjectParameter("Con", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertTaxiInfo_Day", objectIDParameter, customerIDParameter, objectTypeParameter, gPSTimeParameter, arvTimeParameter, s_DateParameter, s_YearParameter, s_MonthParameter, s_DayParameter, r_TotalParameter, mileage_TotalParameter, w_TotalParameter, times_TotalParameter, money_TotalParameter, conParameter);
        }
    
        public virtual int spInsertTaxInfo(Nullable<System.DateTime> genDate, Nullable<double> distance, Nullable<double> fare, Nullable<double> aircFee, Nullable<double> toll, Nullable<double> sLon, Nullable<double> sLat, Nullable<double> eLon, Nullable<double> eLat, string iCCardID, string remark, string createUser)
        {
            var genDateParameter = genDate.HasValue ?
                new ObjectParameter("GenDate", genDate) :
                new ObjectParameter("GenDate", typeof(System.DateTime));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(double));
    
            var fareParameter = fare.HasValue ?
                new ObjectParameter("Fare", fare) :
                new ObjectParameter("Fare", typeof(double));
    
            var aircFeeParameter = aircFee.HasValue ?
                new ObjectParameter("AircFee", aircFee) :
                new ObjectParameter("AircFee", typeof(double));
    
            var tollParameter = toll.HasValue ?
                new ObjectParameter("Toll", toll) :
                new ObjectParameter("Toll", typeof(double));
    
            var sLonParameter = sLon.HasValue ?
                new ObjectParameter("sLon", sLon) :
                new ObjectParameter("sLon", typeof(double));
    
            var sLatParameter = sLat.HasValue ?
                new ObjectParameter("sLat", sLat) :
                new ObjectParameter("sLat", typeof(double));
    
            var eLonParameter = eLon.HasValue ?
                new ObjectParameter("eLon", eLon) :
                new ObjectParameter("eLon", typeof(double));
    
            var eLatParameter = eLat.HasValue ?
                new ObjectParameter("eLat", eLat) :
                new ObjectParameter("eLat", typeof(double));
    
            var iCCardIDParameter = iCCardID != null ?
                new ObjectParameter("ICCardID", iCCardID) :
                new ObjectParameter("ICCardID", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var createUserParameter = createUser != null ?
                new ObjectParameter("CreateUser", createUser) :
                new ObjectParameter("CreateUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertTaxInfo", genDateParameter, distanceParameter, fareParameter, aircFeeParameter, tollParameter, sLonParameter, sLatParameter, eLonParameter, eLatParameter, iCCardIDParameter, remarkParameter, createUserParameter);
        }
    
        public virtual int spInsertTracks(string objectID, string objectRegNum, string gSMVoiceNum, string gSMDataNum, string driverID, Nullable<double> lon, Nullable<double> lat, Nullable<double> speed, Nullable<short> direct, Nullable<System.DateTime> gPSTime, Nullable<System.DateTime> lastDatatime, Nullable<byte> gPSFlag, string cur_Location, string mDTStatus, string operateStatus, Nullable<byte> transType, string statusDes, Nullable<bool> isActive, Nullable<int> stateInt, Nullable<int> mileAge, Nullable<double> bALANCE, Nullable<double> eXHAUST, Nullable<double> tEMPERATURE, Nullable<double> sMOKE)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var gSMVoiceNumParameter = gSMVoiceNum != null ?
                new ObjectParameter("GSMVoiceNum", gSMVoiceNum) :
                new ObjectParameter("GSMVoiceNum", typeof(string));
    
            var gSMDataNumParameter = gSMDataNum != null ?
                new ObjectParameter("GSMDataNum", gSMDataNum) :
                new ObjectParameter("GSMDataNum", typeof(string));
    
            var driverIDParameter = driverID != null ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(string));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(double));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var lastDatatimeParameter = lastDatatime.HasValue ?
                new ObjectParameter("LastDatatime", lastDatatime) :
                new ObjectParameter("LastDatatime", typeof(System.DateTime));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var cur_LocationParameter = cur_Location != null ?
                new ObjectParameter("Cur_Location", cur_Location) :
                new ObjectParameter("Cur_Location", typeof(string));
    
            var mDTStatusParameter = mDTStatus != null ?
                new ObjectParameter("MDTStatus", mDTStatus) :
                new ObjectParameter("MDTStatus", typeof(string));
    
            var operateStatusParameter = operateStatus != null ?
                new ObjectParameter("OperateStatus", operateStatus) :
                new ObjectParameter("OperateStatus", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(byte));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var stateIntParameter = stateInt.HasValue ?
                new ObjectParameter("StateInt", stateInt) :
                new ObjectParameter("StateInt", typeof(int));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("mileAge", mileAge) :
                new ObjectParameter("mileAge", typeof(int));
    
            var bALANCEParameter = bALANCE.HasValue ?
                new ObjectParameter("BALANCE", bALANCE) :
                new ObjectParameter("BALANCE", typeof(double));
    
            var eXHAUSTParameter = eXHAUST.HasValue ?
                new ObjectParameter("EXHAUST", eXHAUST) :
                new ObjectParameter("EXHAUST", typeof(double));
    
            var tEMPERATUREParameter = tEMPERATURE.HasValue ?
                new ObjectParameter("TEMPERATURE", tEMPERATURE) :
                new ObjectParameter("TEMPERATURE", typeof(double));
    
            var sMOKEParameter = sMOKE.HasValue ?
                new ObjectParameter("SMOKE", sMOKE) :
                new ObjectParameter("SMOKE", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertTracks", objectIDParameter, objectRegNumParameter, gSMVoiceNumParameter, gSMDataNumParameter, driverIDParameter, lonParameter, latParameter, speedParameter, directParameter, gPSTimeParameter, lastDatatimeParameter, gPSFlagParameter, cur_LocationParameter, mDTStatusParameter, operateStatusParameter, transTypeParameter, statusDesParameter, isActiveParameter, stateIntParameter, mileAgeParameter, bALANCEParameter, eXHAUSTParameter, tEMPERATUREParameter, sMOKEParameter);
        }
    
        public virtual int spInsertWorkLog(Nullable<System.DateTime> logTime, string employeeWorkID, string iCCardID, string objectID, Nullable<int> teamID, Nullable<byte> logStatus, string remark)
        {
            var logTimeParameter = logTime.HasValue ?
                new ObjectParameter("LogTime", logTime) :
                new ObjectParameter("LogTime", typeof(System.DateTime));
    
            var employeeWorkIDParameter = employeeWorkID != null ?
                new ObjectParameter("EmployeeWorkID", employeeWorkID) :
                new ObjectParameter("EmployeeWorkID", typeof(string));
    
            var iCCardIDParameter = iCCardID != null ?
                new ObjectParameter("ICCardID", iCCardID) :
                new ObjectParameter("ICCardID", typeof(string));
    
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var logStatusParameter = logStatus.HasValue ?
                new ObjectParameter("LogStatus", logStatus) :
                new ObjectParameter("LogStatus", typeof(byte));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertWorkLog", logTimeParameter, employeeWorkIDParameter, iCCardIDParameter, objectIDParameter, teamIDParameter, logStatusParameter, remarkParameter);
        }
    
        public virtual ObjectResult<spQuerySueInfo_Result> spQuerySueInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spQuerySueInfo_Result>("spQuerySueInfo");
        }
    
        public virtual ObjectResult<string> spRegisterTrackMe(string objectID, string imei, string groupCode, Nullable<int> customerID)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var imeiParameter = imei != null ?
                new ObjectParameter("Imei", imei) :
                new ObjectParameter("Imei", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spRegisterTrackMe", objectIDParameter, imeiParameter, groupCodeParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<SpTest_Result> SpTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpTest_Result>("SpTest");
        }
    
        public virtual ObjectResult<SpTestWithParam_Result> SpTestWithParam(Nullable<int> param)
        {
            var paramParameter = param.HasValue ?
                new ObjectParameter("Param", param) :
                new ObjectParameter("Param", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpTestWithParam_Result>("SpTestWithParam", paramParameter);
        }
    
        public virtual int spUpdateActiveOdo(string objectID, string objectRegNum, Nullable<System.DateTime> gPSTime, Nullable<byte> gPSFlag, Nullable<System.DateTime> lastDataTime, Nullable<byte> isActive, Nullable<byte> curTransType, Nullable<int> mileAge, Nullable<int> speed, string lon, string lat, Nullable<System.DateTime> processTime, Nullable<double> fuel)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(byte));
    
            var curTransTypeParameter = curTransType.HasValue ?
                new ObjectParameter("CurTransType", curTransType) :
                new ObjectParameter("CurTransType", typeof(byte));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("MileAge", mileAge) :
                new ObjectParameter("MileAge", typeof(int));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(int));
    
            var lonParameter = lon != null ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(string));
    
            var latParameter = lat != null ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(string));
    
            var processTimeParameter = processTime.HasValue ?
                new ObjectParameter("ProcessTime", processTime) :
                new ObjectParameter("ProcessTime", typeof(System.DateTime));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateActiveOdo", objectIDParameter, objectRegNumParameter, gPSTimeParameter, gPSFlagParameter, lastDataTimeParameter, isActiveParameter, curTransTypeParameter, mileAgeParameter, speedParameter, lonParameter, latParameter, processTimeParameter, fuelParameter);
        }
    
        public virtual int spUpdateActiveOdo_20200124(string objectID, string objectRegNum, Nullable<System.DateTime> gPSTime, Nullable<byte> gPSFlag, Nullable<System.DateTime> lastDataTime, Nullable<byte> isActive, Nullable<byte> curTransType, Nullable<int> mileAge, Nullable<int> speed, string lon, string lat, Nullable<System.DateTime> processTime, Nullable<double> fuel)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(byte));
    
            var curTransTypeParameter = curTransType.HasValue ?
                new ObjectParameter("CurTransType", curTransType) :
                new ObjectParameter("CurTransType", typeof(byte));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("MileAge", mileAge) :
                new ObjectParameter("MileAge", typeof(int));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(int));
    
            var lonParameter = lon != null ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(string));
    
            var latParameter = lat != null ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(string));
    
            var processTimeParameter = processTime.HasValue ?
                new ObjectParameter("ProcessTime", processTime) :
                new ObjectParameter("ProcessTime", typeof(System.DateTime));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateActiveOdo_20200124", objectIDParameter, objectRegNumParameter, gPSTimeParameter, gPSFlagParameter, lastDataTimeParameter, isActiveParameter, curTransTypeParameter, mileAgeParameter, speedParameter, lonParameter, latParameter, processTimeParameter, fuelParameter);
        }
    
        public virtual int spUpdateActiveOdo_old(string objectID, string objectRegNum, Nullable<System.DateTime> gPSTime, Nullable<byte> gPSFlag, Nullable<System.DateTime> lastDataTime, Nullable<byte> isActive, Nullable<byte> curTransType, Nullable<int> mileAge, Nullable<int> speed, string lon, string lat, Nullable<System.DateTime> processTime, Nullable<double> fuel)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(byte));
    
            var curTransTypeParameter = curTransType.HasValue ?
                new ObjectParameter("CurTransType", curTransType) :
                new ObjectParameter("CurTransType", typeof(byte));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("MileAge", mileAge) :
                new ObjectParameter("MileAge", typeof(int));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(int));
    
            var lonParameter = lon != null ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(string));
    
            var latParameter = lat != null ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(string));
    
            var processTimeParameter = processTime.HasValue ?
                new ObjectParameter("ProcessTime", processTime) :
                new ObjectParameter("ProcessTime", typeof(System.DateTime));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateActiveOdo_old", objectIDParameter, objectRegNumParameter, gPSTimeParameter, gPSFlagParameter, lastDataTimeParameter, isActiveParameter, curTransTypeParameter, mileAgeParameter, speedParameter, lonParameter, latParameter, processTimeParameter, fuelParameter);
        }
    
        public virtual int spUpdateActiveTracks(string objectID, Nullable<int> driverID, Nullable<System.DateTime> gPSTime, Nullable<double> lon, Nullable<double> lat, Nullable<double> speed, Nullable<short> direct, Nullable<byte> gPSFlag, string cur_Location, string mDTStatus, string operateStatus, Nullable<byte> transType, string statusDes, Nullable<System.DateTime> lastDataTime, Nullable<System.DateTime> lastSendTime, string lastSendCon, string lastDataCon, Nullable<int> times_Dispatch, Nullable<System.DateTime> lockTime_Dispatch, Nullable<bool> isLocked_Dispatch, Nullable<bool> isActive, Nullable<byte> curTransType, Nullable<int> mileAge, Nullable<double> bALANCE, Nullable<double> eXHAUST, Nullable<double> tEMPERATURE, Nullable<double> sMOKE)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(double));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var cur_LocationParameter = cur_Location != null ?
                new ObjectParameter("Cur_Location", cur_Location) :
                new ObjectParameter("Cur_Location", typeof(string));
    
            var mDTStatusParameter = mDTStatus != null ?
                new ObjectParameter("MDTStatus", mDTStatus) :
                new ObjectParameter("MDTStatus", typeof(string));
    
            var operateStatusParameter = operateStatus != null ?
                new ObjectParameter("OperateStatus", operateStatus) :
                new ObjectParameter("OperateStatus", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(byte));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var lastSendTimeParameter = lastSendTime.HasValue ?
                new ObjectParameter("LastSendTime", lastSendTime) :
                new ObjectParameter("LastSendTime", typeof(System.DateTime));
    
            var lastSendConParameter = lastSendCon != null ?
                new ObjectParameter("LastSendCon", lastSendCon) :
                new ObjectParameter("LastSendCon", typeof(string));
    
            var lastDataConParameter = lastDataCon != null ?
                new ObjectParameter("LastDataCon", lastDataCon) :
                new ObjectParameter("LastDataCon", typeof(string));
    
            var times_DispatchParameter = times_Dispatch.HasValue ?
                new ObjectParameter("Times_Dispatch", times_Dispatch) :
                new ObjectParameter("Times_Dispatch", typeof(int));
    
            var lockTime_DispatchParameter = lockTime_Dispatch.HasValue ?
                new ObjectParameter("LockTime_Dispatch", lockTime_Dispatch) :
                new ObjectParameter("LockTime_Dispatch", typeof(System.DateTime));
    
            var isLocked_DispatchParameter = isLocked_Dispatch.HasValue ?
                new ObjectParameter("IsLocked_Dispatch", isLocked_Dispatch) :
                new ObjectParameter("IsLocked_Dispatch", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var curTransTypeParameter = curTransType.HasValue ?
                new ObjectParameter("CurTransType", curTransType) :
                new ObjectParameter("CurTransType", typeof(byte));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("mileAge", mileAge) :
                new ObjectParameter("mileAge", typeof(int));
    
            var bALANCEParameter = bALANCE.HasValue ?
                new ObjectParameter("BALANCE", bALANCE) :
                new ObjectParameter("BALANCE", typeof(double));
    
            var eXHAUSTParameter = eXHAUST.HasValue ?
                new ObjectParameter("EXHAUST", eXHAUST) :
                new ObjectParameter("EXHAUST", typeof(double));
    
            var tEMPERATUREParameter = tEMPERATURE.HasValue ?
                new ObjectParameter("TEMPERATURE", tEMPERATURE) :
                new ObjectParameter("TEMPERATURE", typeof(double));
    
            var sMOKEParameter = sMOKE.HasValue ?
                new ObjectParameter("SMOKE", sMOKE) :
                new ObjectParameter("SMOKE", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateActiveTracks", objectIDParameter, driverIDParameter, gPSTimeParameter, lonParameter, latParameter, speedParameter, directParameter, gPSFlagParameter, cur_LocationParameter, mDTStatusParameter, operateStatusParameter, transTypeParameter, statusDesParameter, lastDataTimeParameter, lastSendTimeParameter, lastSendConParameter, lastDataConParameter, times_DispatchParameter, lockTime_DispatchParameter, isLocked_DispatchParameter, isActiveParameter, curTransTypeParameter, mileAgeParameter, bALANCEParameter, eXHAUSTParameter, tEMPERATUREParameter, sMOKEParameter);
        }
    
        public virtual int spUpdateDriverTag(string objectID, Nullable<System.DateTime> boardTime, Nullable<double> lon, Nullable<double> lat, Nullable<double> speed, Nullable<short> direct, Nullable<System.DateTime> gPSTime, Nullable<int> gPSFlag, string mDTStatus, Nullable<int> mileage, Nullable<double> fuel, string tagID, Nullable<short> tagType)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var boardTimeParameter = boardTime.HasValue ?
                new ObjectParameter("BoardTime", boardTime) :
                new ObjectParameter("BoardTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(double));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(int));
    
            var mDTStatusParameter = mDTStatus != null ?
                new ObjectParameter("MDTStatus", mDTStatus) :
                new ObjectParameter("MDTStatus", typeof(string));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var fuelParameter = fuel.HasValue ?
                new ObjectParameter("Fuel", fuel) :
                new ObjectParameter("Fuel", typeof(double));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(string));
    
            var tagTypeParameter = tagType.HasValue ?
                new ObjectParameter("TagType", tagType) :
                new ObjectParameter("TagType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateDriverTag", objectIDParameter, boardTimeParameter, lonParameter, latParameter, speedParameter, directParameter, gPSTimeParameter, gPSFlagParameter, mDTStatusParameter, mileageParameter, fuelParameter, tagIDParameter, tagTypeParameter);
        }
    
        public virtual int spUpdateFeeManageFee(string objectID, string feeYear, string feeMonth, Nullable<System.DateTime> service_Startdate, Nullable<System.DateTime> feeFreeFrom, Nullable<System.DateTime> feeFreeTo, Nullable<System.DateTime> fee_Startdate, Nullable<System.DateTime> fee_Enddate, Nullable<decimal> fee_Now, Nullable<decimal> fee_day, Nullable<bool> isStopService, Nullable<bool> isArrearage, Nullable<System.DateTime> arrearageStartDate, Nullable<System.DateTime> lastFeeDate, string remark)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var feeYearParameter = feeYear != null ?
                new ObjectParameter("FeeYear", feeYear) :
                new ObjectParameter("FeeYear", typeof(string));
    
            var feeMonthParameter = feeMonth != null ?
                new ObjectParameter("FeeMonth", feeMonth) :
                new ObjectParameter("FeeMonth", typeof(string));
    
            var service_StartdateParameter = service_Startdate.HasValue ?
                new ObjectParameter("Service_Startdate", service_Startdate) :
                new ObjectParameter("Service_Startdate", typeof(System.DateTime));
    
            var feeFreeFromParameter = feeFreeFrom.HasValue ?
                new ObjectParameter("FeeFreeFrom", feeFreeFrom) :
                new ObjectParameter("FeeFreeFrom", typeof(System.DateTime));
    
            var feeFreeToParameter = feeFreeTo.HasValue ?
                new ObjectParameter("FeeFreeTo", feeFreeTo) :
                new ObjectParameter("FeeFreeTo", typeof(System.DateTime));
    
            var fee_StartdateParameter = fee_Startdate.HasValue ?
                new ObjectParameter("Fee_Startdate", fee_Startdate) :
                new ObjectParameter("Fee_Startdate", typeof(System.DateTime));
    
            var fee_EnddateParameter = fee_Enddate.HasValue ?
                new ObjectParameter("Fee_Enddate", fee_Enddate) :
                new ObjectParameter("Fee_Enddate", typeof(System.DateTime));
    
            var fee_NowParameter = fee_Now.HasValue ?
                new ObjectParameter("Fee_Now", fee_Now) :
                new ObjectParameter("Fee_Now", typeof(decimal));
    
            var fee_dayParameter = fee_day.HasValue ?
                new ObjectParameter("Fee_day", fee_day) :
                new ObjectParameter("Fee_day", typeof(decimal));
    
            var isStopServiceParameter = isStopService.HasValue ?
                new ObjectParameter("IsStopService", isStopService) :
                new ObjectParameter("IsStopService", typeof(bool));
    
            var isArrearageParameter = isArrearage.HasValue ?
                new ObjectParameter("IsArrearage", isArrearage) :
                new ObjectParameter("IsArrearage", typeof(bool));
    
            var arrearageStartDateParameter = arrearageStartDate.HasValue ?
                new ObjectParameter("ArrearageStartDate", arrearageStartDate) :
                new ObjectParameter("ArrearageStartDate", typeof(System.DateTime));
    
            var lastFeeDateParameter = lastFeeDate.HasValue ?
                new ObjectParameter("LastFeeDate", lastFeeDate) :
                new ObjectParameter("LastFeeDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateFeeManageFee", objectIDParameter, feeYearParameter, feeMonthParameter, service_StartdateParameter, feeFreeFromParameter, feeFreeToParameter, fee_StartdateParameter, fee_EnddateParameter, fee_NowParameter, fee_dayParameter, isStopServiceParameter, isArrearageParameter, arrearageStartDateParameter, lastFeeDateParameter, remarkParameter);
        }
    
        public virtual int spUpdateFeeManageFeeType(string objectID, string feeYear, string feeMonth, Nullable<int> iJFTYPE1, Nullable<int> iJFTYPE2, Nullable<int> iJFTYPE3, Nullable<int> iJFTYPE4, Nullable<int> iJFTYPE5, Nullable<int> iJFTYPE6, Nullable<int> iJFTYPE7, Nullable<int> iJFTYPE8)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var feeYearParameter = feeYear != null ?
                new ObjectParameter("FeeYear", feeYear) :
                new ObjectParameter("FeeYear", typeof(string));
    
            var feeMonthParameter = feeMonth != null ?
                new ObjectParameter("FeeMonth", feeMonth) :
                new ObjectParameter("FeeMonth", typeof(string));
    
            var iJFTYPE1Parameter = iJFTYPE1.HasValue ?
                new ObjectParameter("iJFTYPE1", iJFTYPE1) :
                new ObjectParameter("iJFTYPE1", typeof(int));
    
            var iJFTYPE2Parameter = iJFTYPE2.HasValue ?
                new ObjectParameter("iJFTYPE2", iJFTYPE2) :
                new ObjectParameter("iJFTYPE2", typeof(int));
    
            var iJFTYPE3Parameter = iJFTYPE3.HasValue ?
                new ObjectParameter("iJFTYPE3", iJFTYPE3) :
                new ObjectParameter("iJFTYPE3", typeof(int));
    
            var iJFTYPE4Parameter = iJFTYPE4.HasValue ?
                new ObjectParameter("iJFTYPE4", iJFTYPE4) :
                new ObjectParameter("iJFTYPE4", typeof(int));
    
            var iJFTYPE5Parameter = iJFTYPE5.HasValue ?
                new ObjectParameter("iJFTYPE5", iJFTYPE5) :
                new ObjectParameter("iJFTYPE5", typeof(int));
    
            var iJFTYPE6Parameter = iJFTYPE6.HasValue ?
                new ObjectParameter("iJFTYPE6", iJFTYPE6) :
                new ObjectParameter("iJFTYPE6", typeof(int));
    
            var iJFTYPE7Parameter = iJFTYPE7.HasValue ?
                new ObjectParameter("iJFTYPE7", iJFTYPE7) :
                new ObjectParameter("iJFTYPE7", typeof(int));
    
            var iJFTYPE8Parameter = iJFTYPE8.HasValue ?
                new ObjectParameter("iJFTYPE8", iJFTYPE8) :
                new ObjectParameter("iJFTYPE8", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateFeeManageFeeType", objectIDParameter, feeYearParameter, feeMonthParameter, iJFTYPE1Parameter, iJFTYPE2Parameter, iJFTYPE3Parameter, iJFTYPE4Parameter, iJFTYPE5Parameter, iJFTYPE6Parameter, iJFTYPE7Parameter, iJFTYPE8Parameter);
        }
    
        public virtual int spUpdateGPSData(string objectID, Nullable<int> driverID, Nullable<System.DateTime> gPSTime, Nullable<double> lon, Nullable<double> lat, Nullable<double> speed, Nullable<short> direct, Nullable<byte> gPSFlag, string cur_Location, string mDTStatus, string operateStatus, Nullable<byte> transType, string statusDes, Nullable<System.DateTime> lastDataTime, Nullable<System.DateTime> lastSendTime, string lastSendCon, string lastDataCon, Nullable<bool> isActive, Nullable<byte> curTransType, Nullable<int> mileAge, Nullable<double> bALANCE, Nullable<double> eXHAUST, Nullable<double> tEMPERATURE, Nullable<double> sMOKE, Nullable<int> mark, string tagID, Nullable<double> mileage2, Nullable<double> temp2)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(double));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var cur_LocationParameter = cur_Location != null ?
                new ObjectParameter("Cur_Location", cur_Location) :
                new ObjectParameter("Cur_Location", typeof(string));
    
            var mDTStatusParameter = mDTStatus != null ?
                new ObjectParameter("MDTStatus", mDTStatus) :
                new ObjectParameter("MDTStatus", typeof(string));
    
            var operateStatusParameter = operateStatus != null ?
                new ObjectParameter("OperateStatus", operateStatus) :
                new ObjectParameter("OperateStatus", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(byte));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var lastSendTimeParameter = lastSendTime.HasValue ?
                new ObjectParameter("LastSendTime", lastSendTime) :
                new ObjectParameter("LastSendTime", typeof(System.DateTime));
    
            var lastSendConParameter = lastSendCon != null ?
                new ObjectParameter("LastSendCon", lastSendCon) :
                new ObjectParameter("LastSendCon", typeof(string));
    
            var lastDataConParameter = lastDataCon != null ?
                new ObjectParameter("LastDataCon", lastDataCon) :
                new ObjectParameter("LastDataCon", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var curTransTypeParameter = curTransType.HasValue ?
                new ObjectParameter("CurTransType", curTransType) :
                new ObjectParameter("CurTransType", typeof(byte));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("mileAge", mileAge) :
                new ObjectParameter("mileAge", typeof(int));
    
            var bALANCEParameter = bALANCE.HasValue ?
                new ObjectParameter("BALANCE", bALANCE) :
                new ObjectParameter("BALANCE", typeof(double));
    
            var eXHAUSTParameter = eXHAUST.HasValue ?
                new ObjectParameter("EXHAUST", eXHAUST) :
                new ObjectParameter("EXHAUST", typeof(double));
    
            var tEMPERATUREParameter = tEMPERATURE.HasValue ?
                new ObjectParameter("TEMPERATURE", tEMPERATURE) :
                new ObjectParameter("TEMPERATURE", typeof(double));
    
            var sMOKEParameter = sMOKE.HasValue ?
                new ObjectParameter("SMOKE", sMOKE) :
                new ObjectParameter("SMOKE", typeof(double));
    
            var markParameter = mark.HasValue ?
                new ObjectParameter("Mark", mark) :
                new ObjectParameter("Mark", typeof(int));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(string));
    
            var mileage2Parameter = mileage2.HasValue ?
                new ObjectParameter("Mileage2", mileage2) :
                new ObjectParameter("Mileage2", typeof(double));
    
            var temp2Parameter = temp2.HasValue ?
                new ObjectParameter("Temp2", temp2) :
                new ObjectParameter("Temp2", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateGPSData", objectIDParameter, driverIDParameter, gPSTimeParameter, lonParameter, latParameter, speedParameter, directParameter, gPSFlagParameter, cur_LocationParameter, mDTStatusParameter, operateStatusParameter, transTypeParameter, statusDesParameter, lastDataTimeParameter, lastSendTimeParameter, lastSendConParameter, lastDataConParameter, isActiveParameter, curTransTypeParameter, mileAgeParameter, bALANCEParameter, eXHAUSTParameter, tEMPERATUREParameter, sMOKEParameter, markParameter, tagIDParameter, mileage2Parameter, temp2Parameter);
        }
    
        public virtual int spUpdateGPSDataByAppl(string objectID, string objectRegNum, string gSMVoiceNum, string gSMDataNum, Nullable<int> driverID, Nullable<System.DateTime> gPSTime, Nullable<double> lon, Nullable<double> lat, Nullable<double> speed, Nullable<short> direct, Nullable<byte> gPSFlag, string cur_Location, string mDTStatus, string operateStatus, Nullable<byte> transType, string statusDes, Nullable<System.DateTime> lastDataTime, Nullable<System.DateTime> lastSendTime, Nullable<bool> isActive, Nullable<byte> curTransType, Nullable<int> mileAge, Nullable<double> bALANCE, Nullable<double> eXHAUST, Nullable<double> tEMPERATURE, Nullable<double> sMOKE, Nullable<int> mark, string tagID, Nullable<double> mileage2)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var objectRegNumParameter = objectRegNum != null ?
                new ObjectParameter("ObjectRegNum", objectRegNum) :
                new ObjectParameter("ObjectRegNum", typeof(string));
    
            var gSMVoiceNumParameter = gSMVoiceNum != null ?
                new ObjectParameter("GSMVoiceNum", gSMVoiceNum) :
                new ObjectParameter("GSMVoiceNum", typeof(string));
    
            var gSMDataNumParameter = gSMDataNum != null ?
                new ObjectParameter("GSMDataNum", gSMDataNum) :
                new ObjectParameter("GSMDataNum", typeof(string));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(double));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var cur_LocationParameter = cur_Location != null ?
                new ObjectParameter("Cur_Location", cur_Location) :
                new ObjectParameter("Cur_Location", typeof(string));
    
            var mDTStatusParameter = mDTStatus != null ?
                new ObjectParameter("MDTStatus", mDTStatus) :
                new ObjectParameter("MDTStatus", typeof(string));
    
            var operateStatusParameter = operateStatus != null ?
                new ObjectParameter("OperateStatus", operateStatus) :
                new ObjectParameter("OperateStatus", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(byte));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var lastSendTimeParameter = lastSendTime.HasValue ?
                new ObjectParameter("LastSendTime", lastSendTime) :
                new ObjectParameter("LastSendTime", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var curTransTypeParameter = curTransType.HasValue ?
                new ObjectParameter("CurTransType", curTransType) :
                new ObjectParameter("CurTransType", typeof(byte));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("mileAge", mileAge) :
                new ObjectParameter("mileAge", typeof(int));
    
            var bALANCEParameter = bALANCE.HasValue ?
                new ObjectParameter("BALANCE", bALANCE) :
                new ObjectParameter("BALANCE", typeof(double));
    
            var eXHAUSTParameter = eXHAUST.HasValue ?
                new ObjectParameter("EXHAUST", eXHAUST) :
                new ObjectParameter("EXHAUST", typeof(double));
    
            var tEMPERATUREParameter = tEMPERATURE.HasValue ?
                new ObjectParameter("TEMPERATURE", tEMPERATURE) :
                new ObjectParameter("TEMPERATURE", typeof(double));
    
            var sMOKEParameter = sMOKE.HasValue ?
                new ObjectParameter("SMOKE", sMOKE) :
                new ObjectParameter("SMOKE", typeof(double));
    
            var markParameter = mark.HasValue ?
                new ObjectParameter("Mark", mark) :
                new ObjectParameter("Mark", typeof(int));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(string));
    
            var mileage2Parameter = mileage2.HasValue ?
                new ObjectParameter("Mileage2", mileage2) :
                new ObjectParameter("Mileage2", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateGPSDataByAppl", objectIDParameter, objectRegNumParameter, gSMVoiceNumParameter, gSMDataNumParameter, driverIDParameter, gPSTimeParameter, lonParameter, latParameter, speedParameter, directParameter, gPSFlagParameter, cur_LocationParameter, mDTStatusParameter, operateStatusParameter, transTypeParameter, statusDesParameter, lastDataTimeParameter, lastSendTimeParameter, isActiveParameter, curTransTypeParameter, mileAgeParameter, bALANCEParameter, eXHAUSTParameter, tEMPERATUREParameter, sMOKEParameter, markParameter, tagIDParameter, mileage2Parameter);
        }
    
        public virtual int spUpdateGPSDataBySIM(string sIM, Nullable<System.DateTime> gPSTime, Nullable<double> lon, Nullable<double> lat, Nullable<double> speed, Nullable<short> direct, Nullable<byte> gPSFlag, Nullable<System.DateTime> lastDataTime, Nullable<int> mileAge, string statusDes)
        {
            var sIMParameter = sIM != null ?
                new ObjectParameter("SIM", sIM) :
                new ObjectParameter("SIM", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(double));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("mileAge", mileAge) :
                new ObjectParameter("mileAge", typeof(int));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateGPSDataBySIM", sIMParameter, gPSTimeParameter, lonParameter, latParameter, speedParameter, directParameter, gPSFlagParameter, lastDataTimeParameter, mileAgeParameter, statusDesParameter);
        }
    
        public virtual int spUpdateGPSDataMe(string objectID, string statusDes, Nullable<System.DateTime> gPSTime, Nullable<double> lon, Nullable<double> lat)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateGPSDataMe", objectIDParameter, statusDesParameter, gPSTimeParameter, lonParameter, latParameter);
        }
    
        public virtual int spUpdateLocation(string objectID, Nullable<System.DateTime> gPSTime, Nullable<double> lon, Nullable<double> lat, Nullable<double> speed, Nullable<short> direct, Nullable<byte> gPSFlag, string cur_Location, string mDTStatus, Nullable<byte> transType, string statusDes, Nullable<System.DateTime> lastDataTime, Nullable<int> mileAge, Nullable<int> ifIns)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(double));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var gPSFlagParameter = gPSFlag.HasValue ?
                new ObjectParameter("GPSFlag", gPSFlag) :
                new ObjectParameter("GPSFlag", typeof(byte));
    
            var cur_LocationParameter = cur_Location != null ?
                new ObjectParameter("Cur_Location", cur_Location) :
                new ObjectParameter("Cur_Location", typeof(string));
    
            var mDTStatusParameter = mDTStatus != null ?
                new ObjectParameter("MDTStatus", mDTStatus) :
                new ObjectParameter("MDTStatus", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(byte));
    
            var statusDesParameter = statusDes != null ?
                new ObjectParameter("StatusDes", statusDes) :
                new ObjectParameter("StatusDes", typeof(string));
    
            var lastDataTimeParameter = lastDataTime.HasValue ?
                new ObjectParameter("LastDataTime", lastDataTime) :
                new ObjectParameter("LastDataTime", typeof(System.DateTime));
    
            var mileAgeParameter = mileAge.HasValue ?
                new ObjectParameter("MileAge", mileAge) :
                new ObjectParameter("MileAge", typeof(int));
    
            var ifInsParameter = ifIns.HasValue ?
                new ObjectParameter("IfIns", ifIns) :
                new ObjectParameter("IfIns", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLocation", objectIDParameter, gPSTimeParameter, lonParameter, latParameter, speedParameter, directParameter, gPSFlagParameter, cur_LocationParameter, mDTStatusParameter, transTypeParameter, statusDesParameter, lastDataTimeParameter, mileAgeParameter, ifInsParameter);
        }
    
        public virtual int spUpdateMaxSpeed(string objectID, Nullable<System.DateTime> gPSTime, Nullable<int> speed, Nullable<double> lon, Nullable<double> lat)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(int));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateMaxSpeed", objectIDParameter, gPSTimeParameter, speedParameter, lonParameter, latParameter);
        }
    
        public virtual int spUpdateMDTArea(string objectID, Nullable<int> stationID, Nullable<int> stationType, Nullable<double> lonRU, Nullable<double> latRU, Nullable<double> lonLD, Nullable<double> latLD, Nullable<double> stationStartTime, Nullable<double> stationEndTime, string remark, string createuser)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var stationTypeParameter = stationType.HasValue ?
                new ObjectParameter("StationType", stationType) :
                new ObjectParameter("StationType", typeof(int));
    
            var lonRUParameter = lonRU.HasValue ?
                new ObjectParameter("LonRU", lonRU) :
                new ObjectParameter("LonRU", typeof(double));
    
            var latRUParameter = latRU.HasValue ?
                new ObjectParameter("LatRU", latRU) :
                new ObjectParameter("LatRU", typeof(double));
    
            var lonLDParameter = lonLD.HasValue ?
                new ObjectParameter("LonLD", lonLD) :
                new ObjectParameter("LonLD", typeof(double));
    
            var latLDParameter = latLD.HasValue ?
                new ObjectParameter("LatLD", latLD) :
                new ObjectParameter("LatLD", typeof(double));
    
            var stationStartTimeParameter = stationStartTime.HasValue ?
                new ObjectParameter("StationStartTime", stationStartTime) :
                new ObjectParameter("StationStartTime", typeof(double));
    
            var stationEndTimeParameter = stationEndTime.HasValue ?
                new ObjectParameter("StationEndTime", stationEndTime) :
                new ObjectParameter("StationEndTime", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createuserParameter = createuser != null ?
                new ObjectParameter("createuser", createuser) :
                new ObjectParameter("createuser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateMDTArea", objectIDParameter, stationIDParameter, stationTypeParameter, lonRUParameter, latRUParameter, lonLDParameter, latLDParameter, stationStartTimeParameter, stationEndTimeParameter, remarkParameter, createuserParameter);
        }
    
        public virtual int spUpdateOverspeedTracks(string objectID, Nullable<decimal> lon, Nullable<decimal> lat, Nullable<System.DateTime> gPSTime, Nullable<int> speed, Nullable<int> mileage, Nullable<bool> isOverspeedAlarm)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(decimal));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(decimal));
    
            var gPSTimeParameter = gPSTime.HasValue ?
                new ObjectParameter("GPSTime", gPSTime) :
                new ObjectParameter("GPSTime", typeof(System.DateTime));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(int));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("Mileage", mileage) :
                new ObjectParameter("Mileage", typeof(int));
    
            var isOverspeedAlarmParameter = isOverspeedAlarm.HasValue ?
                new ObjectParameter("IsOverspeedAlarm", isOverspeedAlarm) :
                new ObjectParameter("IsOverspeedAlarm", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateOverspeedTracks", objectIDParameter, lonParameter, latParameter, gPSTimeParameter, speedParameter, mileageParameter, isOverspeedAlarmParameter);
        }
    
        public virtual int spUpdateSueInfo(Nullable<int> sUEID, Nullable<System.DateTime> dEALDATE, string dEALCONTENT, string dEALMAN, string @operator)
        {
            var sUEIDParameter = sUEID.HasValue ?
                new ObjectParameter("SUEID", sUEID) :
                new ObjectParameter("SUEID", typeof(int));
    
            var dEALDATEParameter = dEALDATE.HasValue ?
                new ObjectParameter("DEALDATE", dEALDATE) :
                new ObjectParameter("DEALDATE", typeof(System.DateTime));
    
            var dEALCONTENTParameter = dEALCONTENT != null ?
                new ObjectParameter("DEALCONTENT", dEALCONTENT) :
                new ObjectParameter("DEALCONTENT", typeof(string));
    
            var dEALMANParameter = dEALMAN != null ?
                new ObjectParameter("DEALMAN", dEALMAN) :
                new ObjectParameter("DEALMAN", typeof(string));
    
            var operatorParameter = @operator != null ?
                new ObjectParameter("Operator", @operator) :
                new ObjectParameter("Operator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSueInfo", sUEIDParameter, dEALDATEParameter, dEALCONTENTParameter, dEALMANParameter, operatorParameter);
        }
    
        public virtual int spUpdateTag(string objectID, Nullable<System.DateTime> boardTime, Nullable<double> lon, Nullable<double> lat, Nullable<double> speed, Nullable<short> direct, string tagID, Nullable<short> tagType)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var boardTimeParameter = boardTime.HasValue ?
                new ObjectParameter("BoardTime", boardTime) :
                new ObjectParameter("BoardTime", typeof(System.DateTime));
    
            var lonParameter = lon.HasValue ?
                new ObjectParameter("Lon", lon) :
                new ObjectParameter("Lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(double));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(double));
    
            var directParameter = direct.HasValue ?
                new ObjectParameter("Direct", direct) :
                new ObjectParameter("Direct", typeof(short));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(string));
    
            var tagTypeParameter = tagType.HasValue ?
                new ObjectParameter("TagType", tagType) :
                new ObjectParameter("TagType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateTag", objectIDParameter, boardTimeParameter, lonParameter, latParameter, speedParameter, directParameter, tagIDParameter, tagTypeParameter);
        }
    
        public virtual int spWebGisFee(string gSMVoiceNum, string recvStartTime, string recvEndTime, string sendStartTime, string sendEndTime)
        {
            var gSMVoiceNumParameter = gSMVoiceNum != null ?
                new ObjectParameter("GSMVoiceNum", gSMVoiceNum) :
                new ObjectParameter("GSMVoiceNum", typeof(string));
    
            var recvStartTimeParameter = recvStartTime != null ?
                new ObjectParameter("RecvStartTime", recvStartTime) :
                new ObjectParameter("RecvStartTime", typeof(string));
    
            var recvEndTimeParameter = recvEndTime != null ?
                new ObjectParameter("RecvEndTime", recvEndTime) :
                new ObjectParameter("RecvEndTime", typeof(string));
    
            var sendStartTimeParameter = sendStartTime != null ?
                new ObjectParameter("SendStartTime", sendStartTime) :
                new ObjectParameter("SendStartTime", typeof(string));
    
            var sendEndTimeParameter = sendEndTime != null ?
                new ObjectParameter("SendEndTime", sendEndTime) :
                new ObjectParameter("SendEndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spWebGisFee", gSMVoiceNumParameter, recvStartTimeParameter, recvEndTimeParameter, sendStartTimeParameter, sendEndTimeParameter);
        }
    
        public virtual int spWriteUserLog(Nullable<int> userID, Nullable<int> appID, Nullable<int> groupID, Nullable<System.DateTime> logTime, Nullable<byte> logstate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var logTimeParameter = logTime.HasValue ?
                new ObjectParameter("LogTime", logTime) :
                new ObjectParameter("LogTime", typeof(System.DateTime));
    
            var logstateParameter = logstate.HasValue ?
                new ObjectParameter("Logstate", logstate) :
                new ObjectParameter("Logstate", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spWriteUserLog", userIDParameter, appIDParameter, groupIDParameter, logTimeParameter, logstateParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_settings_Result> sp_PGPS_get_asset_settings(string assetID)
        {
            var assetIDParameter = assetID != null ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_settings_Result>("sp_PGPS_get_asset_settings", assetIDParameter);
        }
    
        public virtual ObjectResult<sp_PGPS_get_asset_alert_notif_list_Result> sp_PGPS_get_asset_alert_notif_list(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PGPS_get_asset_alert_notif_list_Result>("sp_PGPS_get_asset_alert_notif_list", userIDParameter);
        }
    }
}
